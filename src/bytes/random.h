#ifndef BDK_BYTES_RANDOM_H
#define BDK_BYTES_RANDOM_H

#include "range.h"
#include "initializer.h"

#include <openssl/rand.h>

namespace bytes {

/**
 * Creates an initializer of random bytes.
 * The number of generated bytes exactly matches the size of the target bytes range.
 * 
 * Examples:
 * Hash hash = bytes::random(); // generates 32 random bytes
 * Address addr = bytes::random(); // generates 20 random bytes
 * 
 * @return a random bytes initializer
 */
constexpr Initializer auto random() {
  return makeInitializer([] (Span span) {
    ::RAND_bytes(span.data(), span.size());
  });
}

/**
 * Creates an random bytes initializer of the given size.
 * 
 * @return a sized initializer of random bytes
 */
constexpr SizedInitializer auto random(size_t size) {
  return makeInitializer(size, [size] (Byte* ptr) {
    ::RAND_bytes(ptr, size);
  });
}

} // namespace bytes

#endif // BDK_BYTES_RANDOM_H
