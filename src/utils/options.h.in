#ifndef OPTIONS_H
#define OPTIONS_H

#include "utils.h"
#include "ecdsa.h"

#include <filesystem>
#include <boost/asio/ip/address.hpp>

/// Singleton class for global node data.
class Options {
  private:
    /// Path to data root folder.
    const std::string rootPath;

    /// Version of the OrbiterSDK.
    const uint64_t SDKVersion = @CMAKE_PROJECT_VERSION@;

    /// Version of the client (string for display/Web3).
    const std::string web3clientVersion;

    /// Version of the blockchain.
    const uint64_t version;

    /// Chain ID of the blockchain.
    const uint64_t chainID;

    /// Websocket server port.
    const uint16_t wsPort;

    /// HTTP server port.
    const uint16_t httpPort;

    /// Coinbase address (if found), used by rdPoS.
    const Address coinbase;

    /// Indicates whether the node is a Validator, set by constructor or if found on file.
    const bool isValidator;

    /// List of known Discovery nodes.
    const std::vector<std::pair<boost::asio::ip::address, uint64_t>> discoveryNodes;

  public:
    /**
     * Constructor for a normal node.
     * Populates coinbase() and isValidator() with false.
     * Creates option.json file within rootPath.
     * @param rootPath Path to data root folder.
     * @param web3clientVersion Version of the client.
     * @param version Version of the chain.
     * @param chainID Chain ID of the chain.
     * @param wsPort Websocket server port.
     * @param httpPort HTTP server port.
     * @param discoveryNodes List of known Discovery nodes.
     */
    Options(
      const std::string& rootPath, const std::string& web3clientVersion,
      const uint64_t& version, const uint64_t& chainID,
      const uint16_t& wsPort, const uint16_t& httpPort,
      const std::vector<std::pair<boost::asio::ip::address, uint64_t>>& discoveryNodes
    );

    /**
     * Constructor for a Validator node.
     * Populates coinbase() and isValidator() with privKey address and true respectively.
     * Creates option.json file within rootPath.
     * @param rootPath Path to data root folder.
     * @param web3clientVersion Version of the client.
     * @param version Version of the chain.
     * @param chainID Chain ID of the chain.
     * @param wsPort Websocket server port.
     * @param httpPort HTTP server port.
     * @param discoveryNodes List of known Discovery nodes.
     * @param privKey Private key of the Validator.
     */
    Options(
      const std::string& rootPath, const std::string& web3clientVersion,
      const uint64_t& version, const uint64_t& chainID,
      const uint16_t& wsPort, const uint16_t& httpPort,
      const std::vector<std::pair<boost::asio::ip::address, uint64_t>>& discoveryNodes,
      const PrivKey& privKey
    );

    /// Copy constructor.
    Options(const Options& other) :
      rootPath(other.rootPath),
      SDKVersion(other.SDKVersion),
      web3clientVersion(other.web3clientVersion),
      version(other.version),
      chainID(other.chainID),
      wsPort(other.wsPort),
      httpPort(other.httpPort),
      coinbase(other.coinbase),
      isValidator(other.isValidator),
      discoveryNodes(other.discoveryNodes)
    {}

    /// Getter for `rootPath`.
    const std::string& getRootPath() const { return this->rootPath; }

    /// Getter for `SDKVersion`.
    const uint64_t& getSDKVersion() const { return this->SDKVersion; }

    /// Getter for `web3clientVersion`.
    const std::string& getWeb3ClientVersion() const { return this->web3clientVersion; }

    /// Getter for `version`.
    const uint64_t& getVersion() const { return this->version; }

    /// Getter for `chainID`.
    const uint64_t& getChainID() const { return this->chainID; }

    /// Getter for `wsPort`.
    const uint16_t& getWsPort() const { return this->wsPort; }

    /// Getter for `httpPort`.
    const uint16_t& getHttpPort() const { return this->httpPort; }

    /// Getter for `coinbase`.
    const Address& getCoinbase() const { return this->coinbase; }

    /// Getter for `isValidator`.
    const bool& getIsValidator() const { return this->isValidator; }

    /// Getter for `discoveryNodes`.
    const std::vector<std::pair<boost::asio::ip::address, uint64_t>>& getDiscoveryNodes() const { return this->discoveryNodes; }

    /**
     * Get the Validator node's private key from the JSON file.
     * @return The Validator node's private key, or an empty private key if missing.
     */
    const PrivKey getValidatorPrivKey() const;

    /**
     * Load an options.json file from a given path and construct the singleton object.
     * Defaults to Options(rootPath, "OrbiterSDK/cpp/linux_x86-64/0.0.2", 2, 8080, 8080, 8081) if not found.
     * @param rootPath Path to data root folder.
     * @return The constructed options object.
     * @throw std::runtime_error on failure.
     */
    static Options fromFile(const std::string& rootPath);
};

#endif // OPTIONS_H
