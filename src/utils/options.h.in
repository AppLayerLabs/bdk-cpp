/*
Copyright (c) [2023-2024] [AppLayer Developers]

This software is distributed under the MIT License.
See the LICENSE.txt file in the project root for more information.
*/

#ifndef OPTIONS_H
#define OPTIONS_H

#include "strings.h"

#include "../libs/json.hpp"
using json = nlohmann::ordered_json;

#include <filesystem>

/// Helper class for setting the node's indexing mode.
class IndexingMode {
  private:
    int value_; ///< The value of the setting.

    /**
     * Constructor.
     * @param value The value of the setting.
     */
    constexpr explicit IndexingMode(int value) : value_(value) {}

  public:
    static const IndexingMode DISABLED; ///< Indexing is disabled.
    static const IndexingMode RPC;  ///< Indexing is enabled (no tracing).
    static const IndexingMode RPC_TRACE; ///< Indexing is enabled (with tracing).

    /**
     * Constructor.
     * @param mode The value of the setting, in string form.
     * @throw DynamicException if the name doesn't match one of the names above.
     */
    explicit IndexingMode(std::string_view mode);

    /// Convert the internal value back to its string form.
    constexpr std::string_view toString() const {
      if (*this == DISABLED) return "DISABLED";
      if (*this == RPC) return "RPC";
      if (*this == RPC_TRACE) return "RPC_TRACE";
      std::unreachable();
    }

    /// Equality operator (default, as the internal value is just an int).
    constexpr bool operator==(const IndexingMode&) const = default;
};

constexpr const IndexingMode IndexingMode::DISABLED{0};
constexpr const IndexingMode IndexingMode::RPC{1};
constexpr const IndexingMode IndexingMode::RPC_TRACE{2};

/// Singleton class for global node data.
class Options {
  private:
    const uint64_t majorSDKVersion_ = @CMAKE_PROJECT_VERSION_MAJOR@;  ///< Major version of BDK.
    const uint64_t minorSDKVersion_ = @CMAKE_PROJECT_VERSION_MINOR@;  ///< Minor version of BDK.
    const uint64_t patchSDKVersion_ = @CMAKE_PROJECT_VERSION_PATCH@;  ///< Patch version of BDK.
    const std::string rootPath_; ///< Path to data root folder.
    const std::string web3clientVersion_; ///< String for displaying the client version (for Web3).
    const uint64_t version_;  ///< Blockchain version.
    const uint64_t chainID_;  ///< Blockchain chain ID.
    const uint16_t httpPort_; ///< HTTP server port.
    const uint64_t eventBlockCap_;  ///< Maximum block range for querying contract events.
    const uint64_t eventLogCap_;  ///< Maximum number of contract events that can be queried at once.
    const uint64_t stateDumpTrigger_;  ///< Block number at which to dump the state (every X blocks dump the state).
    const Address chainOwner_;  ///< Chain owner address (used by ContractManager for deploying contracts).
    const uint256_t chainOwnerInitialBalance_;  ///< Initial balance in WEI for the chain owner address, applied during first init.
    const IndexingMode indexingMode_; ///< The node's indexing mode.
    const json cometBFT_; ///< All options needed by Comet as a json object (the root key names are from the BDK).

  public:
    /**
     * Constructor. Creates option.json file within rootPath.
     * @param rootPath Path to data root folder.
     * @param web3clientVersion Version of the client.
     * @param version Version of the chain.
     * @param chainID Chain ID of the chain.
     * @param chainOwner Chain owner address.
     * @param chainOwnerInitialBalance Chain owner initial balance.
     * @param httpPort HTTP server port.
     * @param eventBlockCap Block range limit for querying events.
     * @param eventLogCap Maximum number of events that can be queried.
     * @param stateDumpTrigger Block number at which to dump the state.
     * @param indexingMode The node's indexing mode.
     * @param cometBFT_ JSON configuration for CometBFT.
     */
    Options(
      const std::string& rootPath,
      const std::string& web3clientVersion,
      const uint64_t& version,
      const uint64_t& chainID,
      const Address& chainOwner,
      const uint256_t& chainOwnerInitialBalance,
      const uint16_t& httpPort,
      const uint64_t& eventBlockCap,
      const uint64_t& eventLogCap,
      const uint64_t& stateDumpTrigger,
      IndexingMode indexingMode,
      const json& cometBFT_
    );

    /// Copy constructor.
    Options(const Options& other) :
      rootPath_(other.rootPath_),
      majorSDKVersion_(other.majorSDKVersion_),
      minorSDKVersion_(other.minorSDKVersion_),
      patchSDKVersion_(other.patchSDKVersion_),
      web3clientVersion_(other.web3clientVersion_),
      version_(other.version_),
      chainID_(other.chainID_),
      chainOwner_(other.chainOwner_),
      chainOwnerInitialBalance_(other.chainOwnerInitialBalance_),
      httpPort_(other.httpPort_),
      eventBlockCap_(other.eventBlockCap_),
      eventLogCap_(other.eventLogCap_),
      stateDumpTrigger_(other.stateDumpTrigger_),
      indexingMode_(other.indexingMode_),
      cometBFT_(other.cometBFT_)
    {}

    ///@{
    /** Getter. */
    const std::string& getRootPath() const { return this->rootPath_; }
    const uint64_t& getMajorSDKVersion() const { return this->majorSDKVersion_; }
    const uint64_t& getMinorSDKVersion() const { return this->minorSDKVersion_; }
    const uint64_t& getPatchSDKVersion() const { return this->patchSDKVersion_; }
    const std::string& getWeb3ClientVersion() const { return this->web3clientVersion_; }
    const uint64_t& getVersion() const { return this->version_; }
    const Address& getChainOwner() const { return this->chainOwner_; }
    const uint256_t& getChainOwnerInitialBalance() const { return this->chainOwnerInitialBalance_; }
    const uint64_t& getChainID() const { return this->chainID_; }
    const uint16_t& getHttpPort() const { return this->httpPort_; }
    const uint64_t& getEventBlockCap() const { return this->eventBlockCap_; }
    const uint64_t& getEventLogCap() const { return this->eventLogCap_; }
    const uint64_t& getStateDumpTrigger() const { return this->stateDumpTrigger_; }
    IndexingMode getIndexingMode() const { return indexingMode_; }
    const json& getCometBFT() const { return cometBFT_; }
    ///@}

    /// Get the full SDK version as a SemVer string ("x.y.z").
    std::string getSDKVersion() const {
      return std::to_string(this->majorSDKVersion_)
        + "." + std::to_string(this->minorSDKVersion_)
        + "." + std::to_string(this->patchSDKVersion_);
    }

    /**
     * Load an options.json file from a given path and construct the singleton object.
     * Defaults to this->genDefault() if no file is found.
     * @param rootPath Path to data root folder.
     * @return The constructed options object.
     * @throw DynamicException on failure (e.g. options.json does not exist).
     */
    static Options fromFile(const std::string& rootPath);

    /**
     * Dump this Options object to its options.json file.
     * The path of the options.json is computed from Options::rootPath_.
     * @return `true` if file was written, `false` if it wasn't written because it already existed.
     */
    bool toFile();
};

#endif // OPTIONS_H
