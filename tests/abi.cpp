#include "tests.h"
#include "../src/utils/utils.h"
#include "../src/contract/abi.h"


void Tests::testABIDecoder() {

  // uint256[3].
  {
    std::string hexABI = "0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000002017594d841303970000000000000000000000000000000000000000000000000000027cae776d7500000000000000000000000000000000000000000000000000016201a9fce5dd";
    std::string ABI = Utils::hexToBytes(hexABI);

    std::vector<ABITypes> types = {
      ABITypes::uint256Arr
    };

    ABIDecoder decoder(types, ABI);

    auto vector = decoder.get<std::vector<uint256_t>>(0);

    assert(vector[0] == uint256_t(2312415123141231511));
    assert(vector[1] == uint256_t(2734526262645));
    assert(vector[2] == uint256_t(389234263123421));
  }

  // Address[3]
  {

    std::string hexABI = "0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000030000000000000000000000005b38da6a701c568545dcfcb03fcb875f56beddc4000000000000000000000000ab8483f64d9c6d1ecf9b849ae677dd3315835cb20000000000000000000000004b20993bc481177ec7e8f571cecae8a9e22c02db";
    std::string ABI = Utils::hexToBytes(hexABI);

    std::vector<ABITypes> types = {
        ABITypes::addressArr
    };

    ABIDecoder decoder(types, ABI);
    auto vector = decoder.get<std::vector<Address>>(0);

    assert(vector[0] == Address("0x5B38Da6a701c568545dCfcB03FcB875f56beddC4", true));
    assert(vector[1] == Address("0xAb8483F64d9C6d1EcF9b849Ae677dD3315835cb2", true));
    assert(vector[2] == Address("0x4B20993Bc481177ec7E8f571ceCaE8A9e22C02db", true));
  }

  // Boolean[3]
  {

    std::string hexABI = "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    std::string ABI = Utils::hexToBytes(hexABI);

    std::vector<ABITypes> types = {
        ABITypes::booleanArr
    };

    ABIDecoder decoder(types, ABI);
    auto vector = decoder.get<std::vector<bool>>(0);

    assert(vector[0] == true);
    assert(vector[1] == false);
    assert(vector[2] == true);
  }

  // Bytes
  {
    std::string hexABI = "0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000040adf1f1a00000000000000000000000000000000000000000000000000000000";
    std::string ABI = Utils::hexToBytes(hexABI);
    std::vector<ABITypes> types = {
      ABITypes::bytes
    };

    ABIDecoder decoder(types, ABI);
    auto bytes = decoder.get<std::string>(0);

    assert(bytes == Utils::hexToBytes("0x0adf1f1a"));

  }

  // Bytes[]

  {
    std::string hexABI = "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000040adf1f1a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004fffadcba0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060113ffedc23100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002aaaa000000000000000000000000000000000000000000000000000000000000";
    std::string ABI = Utils::hexToBytes(hexABI);

    std::vector<ABITypes> types = {
      ABITypes::bytesArr
    };
    
    ABIDecoder decoder(types, ABI);

    auto bytesArr = decoder.get<std::vector<std::string>>(0);

    assert(bytesArr[0] == Utils::hexToBytes("0x0adf1f1a"));
    assert(bytesArr[1] == Utils::hexToBytes("0xfffadcba"));
    assert(bytesArr[2] == Utils::hexToBytes("0x0113ffedc231"));
    assert(bytesArr[3] == Utils::hexToBytes("0xaaaa"));

  }

  // String

  { 
    std::string hexABI = "0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000e5468697320697320612074657374000000000000000000000000000000000000";
    std::string ABI = Utils::hexToBytes(hexABI);

    std::vector<ABITypes> types = {
      ABITypes::string
    };

    ABIDecoder decoder(types, ABI);
    auto string = decoder.get<std::string>(0);

    assert(string == "This is a test");
  }

  // String[]

  {

    std::string hexABI = "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000016546869732069732074686520666972737420746573740000000000000000000000000000000000000000000000000000000000000000000000000000000000175468697320697320746865207365636f6e642074657374000000000000000000000000000000000000000000000000000000000000000000000000000000001654686973206973207468652074686972642074657374000000000000000000000000000000000000000000000000000000000000000000000000000000000016546869732069732074686520666f727468207465737400000000000000000000";
    std::string ABI = Utils::hexToBytes(hexABI);

    std::vector<ABITypes> types = {
      ABITypes::stringArr
    };

    ABIDecoder decoder(types, ABI);

    auto stringArr = decoder.get<std::vector<std::string>>(0);

    assert(stringArr[0] == "This is the first test");
    assert(stringArr[1] == "This is the second test");
    assert(stringArr[2] == "This is the third test");
    assert(stringArr[3] == "This is the forth test");
  }

  // String[], Bytes[]

  {
    std::string hexABI = "0x000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000016546869732069732074686520666972737420746573740000000000000000000000000000000000000000000000000000000000000000000000000000000000175468697320697320746865207365636f6e642074657374000000000000000000000000000000000000000000000000000000000000000000000000000000001654686973206973207468652074686972642074657374000000000000000000000000000000000000000000000000000000000000000000000000000000000016546869732069732074686520666f7274682074657374000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000040adf1f1a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004fffadcba0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060113ffedc23100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002aaaa000000000000000000000000000000000000000000000000000000000000";
    std::string ABI = Utils::hexToBytes(hexABI);
    std::vector<ABITypes> types = {
      ABITypes::stringArr,
      ABITypes::bytesArr
    };

    ABIDecoder decoder(types, ABI);

    auto stringArr = decoder.get<std::vector<std::string>>(0);
    auto bytesArr = decoder.get<std::vector<std::string>>(1);


    assert(stringArr[0] == "This is the first test");
    assert(stringArr[1] == "This is the second test");
    assert(stringArr[2] == "This is the third test");
    assert(stringArr[3] == "This is the forth test");
    assert(bytesArr[0] == Utils::hexToBytes("0x0adf1f1a"));
    assert(bytesArr[1] == Utils::hexToBytes("0xfffadcba"));
    assert(bytesArr[2] == Utils::hexToBytes("0x0113ffedc231"));
    assert(bytesArr[3] == Utils::hexToBytes("0xaaaa"));

  }

  std::cout << __func__ << " OK" << std::endl;

}