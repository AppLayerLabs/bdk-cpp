/*
  Copyright (c) [2023-2024] [AppLayer Developers]
  This software is distributed under the MIT License.
  See the LICENSE.txt file in the project root for more information.
*/

#include "../src/libs/catch2/catch_amalgamated.hpp"
#include "../src/contract/abi.h"
#include "../src/utils/options.h"
#include "../src/core/rdpos.h"
#include "../sdktestsuite.hpp"
#include "contract/templates/erc721test.h"

namespace TERC721BENCHMARK {
  /*
   *
   * ERC721:
   *    pragma solidity ^0.8.0;
   *
   *    import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
   *    import "@openzeppelin/contracts/access/Ownable.sol";
   *    import "@openzeppelin/contracts/utils/Counters.sol";
   *
   *    contract RareNFT is ERC721, Ownable {
   *        using Counters for Counters.Counter;
   *        Counters.Counter private _tokenIds;
   *        constructor() ERC721("RareNFT", "RNFT") Ownable(msg.sender) {}
   *
   *        function mint(address to) public
   *        {
   *            uint256 newItemId = _tokenIds.current();
   *                    _safeMint(to, newItemId);
   *            _tokenIds.increment();
   *        }
   *
   *        function totalSupply() public view returns (uint256) {
   *            return _tokenIds.current();
   *        }
   *    }
   */

  const Bytes erc721bytecode = Hex::toBytes("");

  TEST_CASE("ERC721 Benchmark", "[benchmark]") {
    SECTION("CPP ERC721 Benchmark") {
      std::unique_ptr<Options> options = nullptr;
      Address to(Utils::randBytes(20));

      SDKTestSuite sdk = SDKTestSuite::createNewEnvironment("testERC721CPPBenchmark");
      auto erc721Address = sdk.deployContract<ERC721Test>(std::string("MintNFT"), std::string("MNFT"), std::numeric_limits<uint64_t>::max());
      // Now for the funny part, we are NOT a C++ contract, but we can
      // definitely take advantage of the templated ABI to interact with it
      // as the encoding is the same

      // Create the transaction for transfer
      auto functor = Utils::uint32ToBytes(ABI::FunctorEncoder::encode<Address>("mint").value);
      Bytes mintEncoded(functor.cbegin(), functor.cend());
      Utils::appendBytes(mintEncoded, ABI::Encoder::encodeData<Address>(to));
      TxBlock transferTx = sdk.createNewTx(sdk.getChainOwnerAccount(), erc721Address, 0, mintEncoded);
      auto& state = sdk.getState();
      evmc_tx_context txContext;

      txContext.tx_origin = sdk.getChainOwnerAccount().address.toEvmcAddress();
      txContext.tx_gas_price = {};
      txContext.block_coinbase = to.toEvmcAddress();
      txContext.block_number = 1;
      txContext.block_timestamp = 1;
      txContext.block_gas_limit = std::numeric_limits<int64_t>::max();
      txContext.block_prev_randao = {};
      txContext.chain_id = {};
      txContext.block_base_fee = {};
      txContext.blob_base_fee = {};
      txContext.blob_hashes = nullptr;
      txContext.blob_hashes_count = 0;

      auto callInfo = transferTx.txToMessage();
      Hash randomnessHash = bytes::random();
      int64_t leftOverGas = std::numeric_limits<int64_t>::max();
      uint64_t iterations = 1000000;

      auto start = std::chrono::high_resolution_clock::now();
      for (uint64_t i = 0; i < iterations; i++) {
        state.call(callInfo, txContext, ContractType::CPP, randomnessHash, randomnessHash, randomnessHash, leftOverGas);
      }
      auto end = std::chrono::high_resolution_clock::now();

      long double durationInMicroseconds = std::chrono::duration_cast<std::chrono::microseconds>(end - start).count();
      long double microSecsPerCall = durationInMicroseconds / iterations;
      std::cout << "CPP ERC721 Mint took " << microSecsPerCall << " microseconds per call" << std::endl;
      std::cout << "CPP Total Time: " << durationInMicroseconds / 1000000 << " seconds" << std::endl;
      // Check totalSupply
      REQUIRE(sdk.callViewFunction(erc721Address, &ERC721Test::totalSupply) == iterations);
      // Dump the state
      sdk.getState().saveToDB();
    }
    SECTION("EVM ERC721 Benchmark") {
      std::unique_ptr<Options> options = nullptr;
      Address to(Utils::randBytes(20));

      SDKTestSuite sdk = SDKTestSuite::createNewEnvironment("testERC721EVMBenchmark");
      auto erc721Address = sdk.deployBytecode(erc721bytecode);
      // Now for the funny part, we are NOT a C++ contract, but we can
      // definitely take advantage of the templated ABI to interact with it
      // as the encoding is the same

      // Create the transaction for transfer
      auto functor = Utils::uint32ToBytes(ABI::FunctorEncoder::encode<Address>("mint").value);
      Bytes mintEncoded(functor.cbegin(), functor.cend());
      Utils::appendBytes(mintEncoded, ABI::Encoder::encodeData<Address>(to));
      TxBlock transferTx = sdk.createNewTx(sdk.getChainOwnerAccount(), erc721Address, 0, mintEncoded);
      auto& state = sdk.getState();
      evmc_tx_context txContext;

      txContext.tx_origin = sdk.getChainOwnerAccount().address.toEvmcAddress();
      txContext.tx_gas_price = {};
      txContext.block_coinbase = to.toEvmcAddress();
      txContext.block_number = 1;
      txContext.block_timestamp = 1;
      txContext.block_gas_limit = std::numeric_limits<int64_t>::max();
      txContext.block_prev_randao = {};
      txContext.chain_id = {};
      txContext.block_base_fee = {};
      txContext.blob_base_fee = {};
      txContext.blob_hashes = nullptr;
      txContext.blob_hashes_count = 0;

      auto callInfo = transferTx.txToMessage();
      Hash randomnessHash = bytes::random();
      int64_t leftOverGas = std::numeric_limits<int64_t>::max();
      uint64_t iterations = 100000;

      auto start = std::chrono::high_resolution_clock::now();
      for (uint64_t i = 0; i < iterations; i++) {
        state.call(callInfo, txContext, ContractType::EVM, randomnessHash, randomnessHash, randomnessHash, leftOverGas);
      }
      auto end = std::chrono::high_resolution_clock::now();

      long double durationInMicroseconds = std::chrono::duration_cast<std::chrono::microseconds>(end - start).count();
      long double microSecsPerCall = durationInMicroseconds / iterations;
      std::cout << "EVM ERC721 Mint took " << microSecsPerCall << " microseconds per call" << std::endl;
      std::cout << "EVM Total Time: " << durationInMicroseconds / 1000000 << " seconds" << std::endl;
      // Check totalSupply
      REQUIRE(sdk.callViewFunction(erc721Address, &ERC721Test::totalSupply) == iterations);
      // Dump the state
      sdk.getState().saveToDB();
    }
  }
}
