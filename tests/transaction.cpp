#include "tests.h"
#include "../src/core/utils.h"
#include "../src/core/transaction.h"

void Tests::transactions() {
  std::string tx1Bytes = Utils::hexToBytes("0xf86e8085012a05f20082520894da3ef932f6c1dc41055f7c196c416be5c3c34fe788016345785d8a000080824544a00177cae5d48dcc8750f0647d18797b083ab5ab8ac1ea6e6c5c5ebdc3692533eea008574e6559f910a452af89db94a336d2c402bd27a03404c7f1e2ca5172fb4dec");
  Tx::Base tx1(tx1Bytes, false);

  assert(tx1.nonce() == 0);
  assert(tx1.gasPrice() == uint256_t("5000000000"));
  assert(tx1.gas() == uint256_t("21000"));
  assert(tx1.to().hex() == "da3ef932f6c1dc41055f7c196c416be5c3c34fe7");
  assert(tx1.value() == uint256_t("100000000000000000"));
  std::cout <<  tx1.from().hex() << std::endl;
  assert(tx1.from().hex() == "0c43aa7b1abc9355f4c6ad1c6c0881bc28f765f1");
  assert(tx1.data() == std::string(""));
  assert(tx1.r() == uint256_t("663967998266271129109389889062598836125705429943091786001113539763235009518"));
  assert(tx1.v() == uint256_t("17732"));
  assert(tx1.s() == uint256_t("3772759551946766949526054174207937981965374818020153740855208465901463227884"));

  std::string tx2Bytes = Utils::hexToBytes("0xf8ea8189843b9aca00830397f39406012c8cf97bead5deae237070f9587f8e7a266d80b8843d7d3f5a0000000000000000000000000000000000000000000000000000000000176afc0000000000000000000000000000000000000000000000000018de76816d8000000000000000000000000000000000000000000000000000000aa87bee538000000000000000000000000000000000000000000000000000000000000000a8c025a0cbea9ccc81ddec1f86e0b8a770efaa83ff201b111a8d9c76ada2deade90bebe5a054bd260b5de95efbf7f2a4b611c584aa2b2687ce35c5f8f1569ac37be16482f3");
  Tx::Base tx2(tx2Bytes, false);

  assert(tx2.nonce() == 137);
  assert(tx2.gasPrice() == uint256_t("1000000000"));
  assert(tx2.gas() == uint256_t("235507"));
  assert(tx2.to().hex() == "06012c8cf97bead5deae237070f9587f8e7a266d");
  assert(tx2.value() == uint256_t(0));
  assert(tx2.data() == Utils::hexToBytes("0x3d7d3f5a0000000000000000000000000000000000000000000000000000000000176afc0000000000000000000000000000000000000000000000000018de76816d8000000000000000000000000000000000000000000000000000000aa87bee538000000000000000000000000000000000000000000000000000000000000000a8c0"));
  assert(tx2.from().hex() == "77b07d25d87fce856abb5111cd49316b948a2353");
  assert(tx2.r() == uint256_t("92234032661497017386900321168797282655583194641938484104266006072752341773285"));
  assert(tx2.v() == uint256_t(37));
  assert(tx2.s() == uint256_t("38328475949048129041179570486017826723416404359857313423172742154536001766131"));

  std::string tx3Bytes = Utils::hexToBytes("0xf9018d8221f88502540be40083186a0094645a3f2fa86be27a4d9a3cc93a73f27b33df766f80b90124f0843ba90000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000033ba2cae2934e5f05d0000000000000000000000000000000000000000000000000ded75472f50876e0000000000000000000000000000000000000000000000000000000000000005000000000000000000000000bf2179859fc6d5bee9bf9158632dc51678a4100e0000000000000000000000000f2318565f1996cb1ed2f88e172135791bc1fcbf0000000000000000000000001f573d6fb3f13d689ff844b4ce37794d79a7ff1c0000000000000000000000001f573d6fb3f13d689ff844b4ce37794d79a7ff1c000000000000000000000000c0829421c1d260bd3cb3e0f06cfe2d52db2ce31526a07b26374b6d2e56efd716741b91c8636f75f28edcae269c15259f9e1fedec0fcba0272b97d8936bdb76a2e55dc09357f1cf3ab14e709941b4744902382a1b509fab");
  Tx::Base tx3(tx3Bytes, false);

  assert(tx3.nonce() == 8696);
  assert(tx3.gasPrice() == uint256_t("10000000000"));
  assert(tx3.gas() == uint256_t("1600000"));
  assert(tx3.to().hex() == "645a3f2fa86be27a4d9a3cc93a73f27b33df766f");
  assert(tx3.value() == uint256_t(0));
  assert(tx3.data() == Utils::hexToBytes("f0843ba90000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000033ba2cae2934e5f05d0000000000000000000000000000000000000000000000000ded75472f50876e0000000000000000000000000000000000000000000000000000000000000005000000000000000000000000bf2179859fc6d5bee9bf9158632dc51678a4100e0000000000000000000000000f2318565f1996cb1ed2f88e172135791bc1fcbf0000000000000000000000001f573d6fb3f13d689ff844b4ce37794d79a7ff1c0000000000000000000000001f573d6fb3f13d689ff844b4ce37794d79a7ff1c000000000000000000000000c0829421c1d260bd3cb3e0f06cfe2d52db2ce315"));
  assert(tx3.from().hex() == "00923b9a074762b93650716333b3e1473a15048e");
  assert(tx3.r() == uint256_t("55702002193746520688204314053150839350676529012610257238632811260435080417227"));
  assert(tx3.v() == uint256_t(38));
  assert(tx3.s() == uint256_t("17717223521104981938711965898113481672280942144063665597164523871447817428907"));

  // Try "loading" the transaction from DB.
  std::string serializedTx = tx3.serialize();
  Tx::Base fromDB(serializedTx, true);
  assert(tx3 == fromDB);

  std::cout << __func__ << " OK" << std::endl;
}

void Tests::transactionSign() {
  // Derive private key and address.
  uint256_t keyI = uint256_t("172381824912738179852131");
  PrivKey privKey(Utils::uint256ToBytes(keyI));
  UncompressedPubkey pubkey = Secp256k1::toPub(privKey);
  Address address = Secp256k1::toAddress(pubkey);

  // Create tx.
  Address to("0x1544920afDc2D6de7BbAc245170789D498320498", true);
  uint256_t value("1000000000000000000");
  std::string data = "";
  uint64_t chainId = 8848;
  uint256_t nonce = 0;
  uint256_t gas = 21000;
  uint256_t gasPrice("5000000000");
  Tx::Base transaction(
    address,
    to,
    value,
    data,
    chainId,
    nonce,
    gas,
    gasPrice
  );
  transaction.sign(privKey);
  assert(transaction.rlpSerialize(true) == Utils::hexToBytes("f86e8085012a05f200825208941544920afdc2d6de7bbac245170789d498320498880de0b6b3a764000080824543a05f91b0ac9ad0a00b58d84a0aeda315f9ec5461a1bd899ae26009484df639a13ea035eea065998809fa87d3a7eeed3c330efdae35f5da7113ad1e45c24ce401cc40"));
  std::cout << __func__ << " OK" << std::endl;
}
