/*
Copyright (c) [2023-2024] [AppLayer Developers]

This software is distributed under the MIT License.
See the LICENSE.txt file in the project root for more information.
*/

#include "evmone/evmone.h"
#include "catch2/catch_amalgamated.hpp"
#include "contract/messages/evmcontractexecutor.h"
#include "bytes/random.h"
#include "bytes/hex.h"
#include "bytes/cast.h"
#include "utils/utils.h"

/**
 * Test cases
 * 
 * 1. Simple function call, run some math code, whatever
 * 2. Nested function call
 * 3. Call with value
 * 4. Out of gas call?
 * 5. Delegate Call
 * 6. Attempt to make mutable call from static call (error expected)
 * 7. Any other error call?
 * 
 * 8... Corner cases?
 */

constexpr Address ORIGIN_ADDRESS = bytes::hex("0x00dead00665771855a34155f5e7405489df2c3c6");
constexpr FixedBytes<585> SIMPLE_CONTRACT_BYTECODE = bytes::hex("0x608060405234801561001057600080fd5b50610229806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806306661abd1461003b57806311a1d3e814610059575b600080fd5b610043610089565b60405161005091906100d5565b60405180910390f35b610073600480360381019061006e9190610121565b610092565b60405161008091906100d5565b60405180910390f35b60008054905090565b600060016000546100a3919061017d565b60008190555081826100b591906101b1565b9050919050565b6000819050919050565b6100cf816100bc565b82525050565b60006020820190506100ea60008301846100c6565b92915050565b600080fd5b6100fe816100bc565b811461010957600080fd5b50565b60008135905061011b816100f5565b92915050565b600060208284031215610137576101366100f0565b5b60006101458482850161010c565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610188826100bc565b9150610193836100bc565b92508282019050808211156101ab576101aa61014e565b5b92915050565b60006101bc826100bc565b91506101c7836100bc565b92508282026101d5816100bc565b915082820484148315176101ec576101eb61014e565b5b509291505056fea26469706673582212200803e42b1acf7991b8d0f02907360f1e72660bcb1a223e3e5b29bdcf8b283b2664736f6c63430008130033");
constexpr FixedBytes<477> FUNDS_CONTRACT_BYTECODE = bytes::hex("0x608060405234801561001057600080fd5b506101bd806100206000396000f3fe6080604052600436106100295760003560e01c8063d0e30db01461002e578063f3fef3a314610038575b600080fd5b610036610061565b005b34801561004457600080fd5b5061005f600480360381019061005a9190610147565b610063565b005b565b8173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156100a9573d6000803e3d6000fd5b505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100de826100b3565b9050919050565b6100ee816100d3565b81146100f957600080fd5b50565b60008135905061010b816100e5565b92915050565b6000819050919050565b61012481610111565b811461012f57600080fd5b50565b6000813590506101418161011b565b92915050565b6000806040838503121561015e5761015d6100ae565b5b600061016c858286016100fc565b925050602061017d85828601610132565b915050925092905056fea2646970667358221220f033d70d7f542aeddd138086a36a545f06b35e7a56f135b907fa8a98160682b064736f6c63430008130033");
const uint256_t ONE_ETHER{"1000000000000000000"};
constexpr Hash EMPTY_HASH{};

struct NoOpObserver {
  constexpr void operator()(auto&&) const {}
};

template<typename Observer>
struct MockedEnvironment {
  MockedEnvironment(Observer observer)
    : vm(evmc_create_evmone(), evmc_destroy), storage(), accounts(), context(ExecutionContext::Builder().storage(storage).accounts(accounts).build()),
      executor(AnyEncodedMessageHandler::from(*this), context, vm.get()) {}

  MockedEnvironment() : MockedEnvironment(NoOpObserver{}) {}

  ~MockedEnvironment() = default;
  MockedEnvironment(const MockedEnvironment&) = delete;
  MockedEnvironment(MockedEnvironment&&) = delete;
  MockedEnvironment& operator=(const MockedEnvironment&) = delete;
  MockedEnvironment& operator=(MockedEnvironment&&) = delete;

  Bytes onMessage(concepts::CallMessage auto&& msg) {
    std::invoke(observer_, msg);
    return executor.execute(std::forward<decltype(msg)>(msg));
  }

  Address onMessage(concepts::CreateMessage auto&& msg) {
    std::invoke(observer_, msg);
    return executor.execute(std::forward<decltype(msg)>(msg));
  }

  std::unique_ptr<evmc_vm, void(*)(evmc_vm*)> vm;
  ExecutionContext::Storage storage;
  ExecutionContext::Accounts accounts;
  ExecutionContext context;
  EvmContractExecutor executor;
  Observer observer_;
};

MockedEnvironment() -> MockedEnvironment<NoOpObserver>;

TEST_CASE("Evm Message Executor Tests", "[evmcontractexecutor]") {
  // SECTION("Simple calls") {
  //   MockedEnvironment env;

  //   env.accounts.emplace(ORIGIN_ADDRESS, Account(1000000, 0));

  //   Gas gas(1000000);
  //   uint256_t value = 0;
  //   const Bytes getCountInput = Utils::makeBytes(bytes::hex("0x06661abd"));
  //   const Bytes getSquaredInput = Utils::makeBytes(bytes::hex("0x11a1d3e80000000000000000000000000000000000000000000000000000000000000019"));
  //   const Address expectedContractAddress = bytes::hex("0x5b41cef7f46a4a147e31150c3c5ffd077e54d0e1");

  //   EncodedCreateMessage createMessage(ORIGIN_ADDRESS, gas, value, SIMPLE_CONTRACT_BYTECODE);
  //   EncodedStaticCallMessage getCountMessage(ORIGIN_ADDRESS, expectedContractAddress, gas, getCountInput);
  //   EncodedCallMessage getSquaredMessage(ORIGIN_ADDRESS, expectedContractAddress, gas, value, getSquaredInput);

  //   const Address contractAddress = env.executor.execute(createMessage);
  //   REQUIRE(contractAddress == expectedContractAddress);
  
  //   uint256_t count = std::get<0>(ABI::Decoder::decodeData<uint256_t>(env.executor.execute(getCountMessage)));
  //   REQUIRE(count == uint256_t(0));

  //   uint256_t squared = std::get<0>(ABI::Decoder::decodeData<uint256_t>(env.executor.execute(getSquaredMessage)));
  //   REQUIRE(squared == uint256_t(625));

  //   count = std::get<0>(ABI::Decoder::decodeData<uint256_t>(env.executor.execute(getCountMessage)));
  //   REQUIRE(count == uint256_t(1));

  //   value = 200;
  //   REQUIRE_THROWS(env.executor.execute(getSquaredMessage));
  // }

  // SECTION("Calls with value") {
  //   MockedEnvironment env([] (const auto& msg) {
  //     printf("foo!\n");
  //   });

  //   const Address firstAccountAddress = bytes::hex("0x05ed5b0cec75408bb57ab2a5413b9d6b0d6c756f");
  //   const Address secondAccountAddress = bytes::hex("0xf11abf1f64dbcc256599b57e82f8d6654b0aba40");

  //   Account& firstAccount = *env.accounts.emplace(firstAccountAddress, Account(ONE_ETHER, 1)).first->second;
  //   Account& secondAccount = *env.accounts.emplace(secondAccountAddress, Account(0, 1)).first->second;

  //   const Bytes fundsBytecode = Utils::makeBytes(bytes::hex("0x608060405234801561001057600080fd5b50610225806100206000396000f3fe6080604052600436106100345760003560e01c8063b69ef8a814610039578063d0e30db014610064578063f3fef3a31461006e575b600080fd5b34801561004557600080fd5b5061004e610097565b60405161005b9190610105565b60405180910390f35b61006c61009f565b005b34801561007a57600080fd5b50610095600480360381019061009091906101af565b6100a1565b005b600047905090565b565b8173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156100e7573d6000803e3d6000fd5b505050565b6000819050919050565b6100ff816100ec565b82525050565b600060208201905061011a60008301846100f6565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061015082610125565b9050919050565b61016081610145565b811461016b57600080fd5b50565b60008135905061017d81610157565b92915050565b61018c816100ec565b811461019757600080fd5b50565b6000813590506101a981610183565b92915050565b600080604083850312156101c6576101c5610120565b5b60006101d48582860161016e565b92505060206101e58582860161019a565b915050925092905056fea26469706673582212206df27ae5d2764317da225f7c3853c25e3786f13b2f78691a76f215a48ab6955a64736f6c63430008130033"));
  //   const Bytes casinoBytecode = Utils::makeBytes(bytes::hex("0x608060405260016000806101000a81548160ff02191690831515021790555034801561002a57600080fd5b506103ad8061003a6000396000f3fe6080604052600436106100555760003560e01c806311610c251461005a5780632ad957861461006457806343d726d61461008d57806347535d7b146100a4578063b69ef8a8146100cf578063fcfff16f146100fa575b600080fd5b610062610111565b005b34801561007057600080fd5b5061008b60048036038101906100869190610263565b610160565b005b34801561009957600080fd5b506100a26101aa565b005b3480156100b057600080fd5b506100b96101c6565b6040516100c691906102ab565b60405180910390f35b3480156100db57600080fd5b506100e46101dc565b6040516100f191906102df565b60405180910390f35b34801561010657600080fd5b5061010f6101e4565b005b60008054906101000a900460ff1661015e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161015590610357565b60405180910390fd5b565b8073ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f193505050501580156101a6573d6000803e3d6000fd5b5050565b60008060006101000a81548160ff021916908315150217905550565b60008060009054906101000a900460ff16905090565b600047905090565b60016000806101000a81548160ff021916908315150217905550565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061023082610205565b9050919050565b61024081610225565b811461024b57600080fd5b50565b60008135905061025d81610237565b92915050565b60006020828403121561027957610278610200565b5b60006102878482850161024e565b91505092915050565b60008115159050919050565b6102a581610290565b82525050565b60006020820190506102c0600083018461029c565b92915050565b6000819050919050565b6102d9816102c6565b82525050565b60006020820190506102f460008301846102d0565b92915050565b600082825260208201905092915050565b7f6265747320636c6f736564000000000000000000000000000000000000000000600082015250565b6000610341600b836102fa565b915061034c8261030b565b602082019050919050565b6000602082019050818103600083015261037081610334565b905091905056fea26469706673582212207757c95d521b5892342b02350317f2c90bcb46f0e30b16a13de45e34c659e21764736f6c63430008130033"));
  //   const Bytes gamblerBytecode = Utils::makeBytes(bytes::hex("0x608060405234801561001057600080fd5b50610292806100206000396000f3fe6080604052600436106100295760003560e01c80632c5433051461002e578063b69ef8a81461004a575b600080fd5b610048600480360381019061004391906101e8565b610075565b005b34801561005657600080fd5b5061005f61017d565b60405161006c9190610241565b60405180910390f35b600082905060008290508173ffffffffffffffffffffffffffffffffffffffff166311610c25346040518263ffffffff1660e01b81526004016000604051808303818588803b1580156100c757600080fd5b505af1935050505080156100d9575060015b610176573d8060008114610109576040519150601f19603f3d011682016040523d82523d6000602084013e61010e565b606091505b508173ffffffffffffffffffffffffffffffffffffffff1663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561015757600080fd5b505af115801561016b573d6000803e3d6000fd5b505050505050610177565b5b50505050565b600047905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006101b58261018a565b9050919050565b6101c5816101aa565b81146101d057600080fd5b50565b6000813590506101e2816101bc565b92915050565b600080604083850312156101ff576101fe610185565b5b600061020d858286016101d3565b925050602061021e858286016101d3565b9150509250929050565b6000819050919050565b61023b81610228565b82525050565b60006020820190506102566000830184610232565b9291505056fea2646970667358221220ce419e18421bafa55bf72c1e46652f2e313a338b574ece304a4044cb4cc9c05164736f6c63430008130033"));

  //   Gas gas(1'000'000);
  //   uint256_t value = 0;
  //   Bytes input;

  //   const Address fundsAddress = env.executor.execute(EncodedCreateMessage(firstAccountAddress, gas, value, fundsBytecode));
  //   firstAccount.nonce++;
  //   const Address casinoAddress = env.executor.execute(EncodedCreateMessage(firstAccountAddress, gas, value, casinoBytecode));
  //   firstAccount.nonce++;
  //   const Address gamblerAddress = env.executor.execute(EncodedCreateMessage(firstAccountAddress, gas, value, gamblerBytecode));
  //   firstAccount.nonce++;

  //   // TODO: with the call bellow, things doesn't work
  //   input.clear();
  //   auto functor1 = ABI::FunctorEncoder::encode<>("close");
  //   Utils::appendBytes(input, Utils::uint32ToBytes(functor1.value));
  //   env.executor.execute(EncodedCallMessage(firstAccountAddress, casinoAddress, gas, value, input));

  //   input.clear();
  //   auto functor2 = ABI::FunctorEncoder::encode<Address, Address>("gamble");
  //   Utils::appendBytes(input, Utils::uint32ToBytes(functor2.value));
  //   Utils::appendBytes(input, ABI::Encoder::encodeData<Address, Address>(casinoAddress, fundsAddress));

  //   value = ONE_ETHER / 2;
  //   env.executor.execute(EncodedCallMessage(firstAccountAddress, gamblerAddress, gas, value, input));

  //   std::cout << "gambler balance: " << env.accounts.at(gamblerAddress)->balance << "\n";
  //   std::cout << "casino balance: " << env.accounts.at(casinoAddress)->balance << "\n";
  //   std::cout << "funds balance: " << env.accounts.at(fundsAddress)->balance << "\n";
  // }

  // SECTION("Delegate calls") {
  //   // TODO: the code field from the create message also has the constructor arguments
    
  //   MockedEnvironment env;
  //   Gas gas(1'000'000);
  //   uint256_t value = 0;

  //   const Address accountAddress = bytes::hex("0x05ed5b0cec75408bb57ab2a5413b9d6b0d6c756f");
  //   Account& account = *env.accounts.emplace(accountAddress, Account(ONE_ETHER, 1)).first->second;

  //   const Bytes delegatorBytecode = Utils::makeBytes(bytes::hex("0x60806040526040518060400160405280600681526020017f416c666163650000000000000000000000000000000000000000000000000000815250600090816200004a91906200032e565b5073ab8483f64d9c6d1ecf9b849ae677dd3315835cb2600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550348015620000ad57600080fd5b5062000415565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200013657607f821691505b6020821081036200014c576200014b620000ee565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620001b67fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000177565b620001c2868362000177565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006200020f620002096200020384620001da565b620001e4565b620001da565b9050919050565b6000819050919050565b6200022b83620001ee565b620002436200023a8262000216565b84845462000184565b825550505050565b600090565b6200025a6200024b565b6200026781848462000220565b505050565b5b818110156200028f576200028360008262000250565b6001810190506200026d565b5050565b601f821115620002de57620002a88162000152565b620002b38462000167565b81016020851015620002c3578190505b620002db620002d28562000167565b8301826200026c565b50505b505050565b600082821c905092915050565b60006200030360001984600802620002e3565b1980831691505092915050565b60006200031e8383620002f0565b9150826002028217905092915050565b6200033982620000b4565b67ffffffffffffffff811115620003555762000354620000bf565b5b6200036182546200011d565b6200036e82828562000293565b600060209050601f831160018114620003a6576000841562000391578287015190505b6200039d858262000310565b8655506200040d565b601f198416620003b68662000152565b60005b82811015620003e057848901518255600182019150602085019450602081019050620003b9565b86831015620004005784890151620003fc601f891682620002f0565b8355505b6001600288020188555050505b505050505050565b61076e80620004256000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063893d20e81461005c578063ce6d41de1461007a578063d129b79a14610098578063d6026296146100b6578063e7663079146100d2575b600080fd5b6100646100f0565b60405161007191906103e6565b60405180910390f35b61008261011a565b60405161008f9190610491565b60405180910390f35b6100a06101ac565b6040516100ad9190610491565b60405180910390f35b6100d060048036038101906100cb919061054e565b61023a565b005b6100da61037f565b6040516100e791906103e6565b60405180910390f35b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060008054610129906105dd565b80601f0160208091040260200160405190810160405280929190818152602001828054610155906105dd565b80156101a25780601f10610177576101008083540402835291602001916101a2565b820191906000526020600020905b81548152906001019060200180831161018557829003601f168201915b5050505050905090565b600080546101b9906105dd565b80601f01602080910402602001604051908101604052809291908181526020018280546101e5906105dd565b80156102325780601f1061020757610100808354040283529160200191610232565b820191906000526020600020905b81548152906001019060200180831161021557829003601f168201915b505050505081565b6000808473ffffffffffffffffffffffffffffffffffffffff1663368b877260e01b858560405160240161026f92919061064a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516102d991906106b5565b600060405180830381855af49150503d8060008114610314576040519150601f19603f3d011682016040523d82523d6000602084013e610319565b606091505b509150915060001515821515036103785760008151111561033d5780518082602001fd5b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161036f90610718565b60405180910390fd5b5050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006103d0826103a5565b9050919050565b6103e0816103c5565b82525050565b60006020820190506103fb60008301846103d7565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561043b578082015181840152602081019050610420565b60008484015250505050565b6000601f19601f8301169050919050565b600061046382610401565b61046d818561040c565b935061047d81856020860161041d565b61048681610447565b840191505092915050565b600060208201905081810360008301526104ab8184610458565b905092915050565b600080fd5b600080fd5b6104c6816103c5565b81146104d157600080fd5b50565b6000813590506104e3816104bd565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261050e5761050d6104e9565b5b8235905067ffffffffffffffff81111561052b5761052a6104ee565b5b602083019150836001820283011115610547576105466104f3565b5b9250929050565b600080600060408486031215610567576105666104b3565b5b6000610575868287016104d4565b935050602084013567ffffffffffffffff811115610596576105956104b8565b5b6105a2868287016104f8565b92509250509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806105f557607f821691505b602082108103610608576106076105ae565b5b50919050565b82818337600083830152505050565b6000610629838561040c565b935061063683858461060e565b61063f83610447565b840190509392505050565b6000602082019050818103600083015261066581848661061d565b90509392505050565b600081519050919050565b600081905092915050565b600061068f8261066e565b6106998185610679565b93506106a981856020860161041d565b80840191505092915050565b60006106c18284610684565b915081905092915050565b7f46756e6374696f6e2063616c6c20726576657274656400000000000000000000600082015250565b600061070260168361040c565b915061070d826106cc565b602082019050919050565b60006020820190508181036000830152610731816106f5565b905091905056fea26469706673582212207bb9c9ffbef5fbdb6a396f9c4e1962581051cafee1ecbf4367476185b9bdaadd64736f6c63430008130033"));
  //   const Bytes delegatedBytecode = Utils::makeBytes(bytes::hex("0x60806040526040518060400160405280600681526020017f416c666163650000000000000000000000000000000000000000000000000000815250600090816200004a919062000340565b503480156200005857600080fd5b5060405162000caa38038062000caa83398181016040528101906200007e919062000491565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050620004c3565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200014857607f821691505b6020821081036200015e576200015d62000100565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620001c87fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000189565b620001d4868362000189565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620002216200021b6200021584620001ec565b620001f6565b620001ec565b9050919050565b6000819050919050565b6200023d8362000200565b620002556200024c8262000228565b84845462000196565b825550505050565b600090565b6200026c6200025d565b6200027981848462000232565b505050565b5b81811015620002a1576200029560008262000262565b6001810190506200027f565b5050565b601f821115620002f057620002ba8162000164565b620002c58462000179565b81016020851015620002d5578190505b620002ed620002e48562000179565b8301826200027e565b50505b505050565b600082821c905092915050565b60006200031560001984600802620002f5565b1980831691505092915050565b600062000330838362000302565b9150826002028217905092915050565b6200034b82620000c6565b67ffffffffffffffff811115620003675762000366620000d1565b5b6200037382546200012f565b62000380828285620002a5565b600060209050601f831160018114620003b85760008415620003a3578287015190505b620003af858262000322565b8655506200041f565b601f198416620003c88662000164565b60005b82811015620003f257848901518255600182019150602085019450602081019050620003cb565b868310156200041257848901516200040e601f89168262000302565b8355505b6001600288020188555050505b505050505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000459826200042c565b9050919050565b6200046b816200044c565b81146200047757600080fd5b50565b6000815190506200048b8162000460565b92915050565b600060208284031215620004aa57620004a962000427565b5b6000620004ba848285016200047a565b91505092915050565b6107d780620004d36000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063368b87721461005c578063893d20e814610078578063ce6d41de14610096578063d129b79a146100b4578063e7663079146100d2575b600080fd5b61007660048036038101906100719190610326565b6100f0565b005b610080610147565b60405161008d91906103b4565b60405180910390f35b61009e610171565b6040516100ab919061045f565b60405180910390f35b6100bc610203565b6040516100c9919061045f565b60405180910390f35b6100da610291565b6040516100e791906103b4565b60405180910390f35b8181600091826101019291906106d1565b5033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060008054610180906104ea565b80601f01602080910402602001604051908101604052809291908181526020018280546101ac906104ea565b80156101f95780601f106101ce576101008083540402835291602001916101f9565b820191906000526020600020905b8154815290600101906020018083116101dc57829003601f168201915b5050505050905090565b60008054610210906104ea565b80601f016020809104026020016040519081016040528092919081815260200182805461023c906104ea565b80156102895780601f1061025e57610100808354040283529160200191610289565b820191906000526020600020905b81548152906001019060200180831161026c57829003601f168201915b505050505081565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f8401126102e6576102e56102c1565b5b8235905067ffffffffffffffff811115610303576103026102c6565b5b60208301915083600182028301111561031f5761031e6102cb565b5b9250929050565b6000806020838503121561033d5761033c6102b7565b5b600083013567ffffffffffffffff81111561035b5761035a6102bc565b5b610367858286016102d0565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061039e82610373565b9050919050565b6103ae81610393565b82525050565b60006020820190506103c960008301846103a5565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156104095780820151818401526020810190506103ee565b60008484015250505050565b6000601f19601f8301169050919050565b6000610431826103cf565b61043b81856103da565b935061044b8185602086016103eb565b61045481610415565b840191505092915050565b600060208201905081810360008301526104798184610426565b905092915050565b600082905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061050257607f821691505b602082108103610515576105146104bb565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261057d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610540565b6105878683610540565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006105ce6105c96105c48461059f565b6105a9565b61059f565b9050919050565b6000819050919050565b6105e8836105b3565b6105fc6105f4826105d5565b84845461054d565b825550505050565b600090565b610611610604565b61061c8184846105df565b505050565b5b8181101561064057610635600082610609565b600181019050610622565b5050565b601f821115610685576106568161051b565b61065f84610530565b8101602085101561066e578190505b61068261067a85610530565b830182610621565b50505b505050565b600082821c905092915050565b60006106a86000198460080261068a565b1980831691505092915050565b60006106c18383610697565b9150826002028217905092915050565b6106db8383610481565b67ffffffffffffffff8111156106f4576106f361048c565b5b6106fe82546104ea565b610709828285610644565b6000601f8311600181146107385760008415610726578287013590505b61073085826106b5565b865550610798565b601f1984166107468661051b565b60005b8281101561076e57848901358255600182019150602085019450602081019050610749565b8683101561078b5784890135610787601f891682610697565b8355505b6001600288020188555050505b5050505050505056fea26469706673582212204d0495ba5050deed7ead9ed3191f798cb26ec86deac8246cd32b297fec3664cb64736f6c634300081300330000000000000000000000009fc12574abe3e595c73b6d4380762f232507aeeb"));

  //   const Address delegatorAddress = env.executor.execute(EncodedCreateMessage(accountAddress, gas, value, delegatorBytecode));
  //   account.nonce++;

  //   const Address delegatedAddress = env.executor.execute(EncodedCreateMessage(accountAddress, gas, value, delegatedBytecode));
  //   account.nonce++;

  //   Bytes input;
  //   auto functor = ABI::FunctorEncoder::encode<Address, std::string>("delegateTo");
  //   Utils::appendBytes(input, Utils::uint32ToBytes(functor.value));
  //   Utils::appendBytes(input, ABI::Encoder::encodeData<Address, std::string>(delegatedAddress, std::string("cometa")));

  //   std::cout << "\n\n";
  //   std::cout << "account address: " << accountAddress.hex(true) << "\n";
  //   std::cout << "delegator address: " << delegatorAddress.hex(true) << "\n";
  //   std::cout << "delegated address: " << delegatedAddress.hex(true) << "\n\n";

  //   env.executor.execute(EncodedCallMessage(accountAddress, delegatorAddress, gas, value, input));
  // }
}
