/*
  Copyright (c) [2023-2024] [AppLayer Developers]
  This software is distributed under the MIT License.
  See the LICENSE.txt file in the project root for more information.
*/

#include "../../src/libs/catch2/catch_amalgamated.hpp"

#include "../../src/contract/templates/erc20wrapper.h" // erc20.h

#include "../sdktestsuite.hpp"

namespace TEVM {
  /*
   *
   * ERC20:
   * Constructor is called with argument "10000000000000000000000"
   *     // SPDX-  License-Identifier: MIT
   *     pragma solidity ^0.8.0;
   *
   *     import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
   *
   *     contract ERC20Test is ERC20 {
   *         constructor(uint256 initialSupply) ERC20("TestToken", "TST") {
   *             _mint(msg.sender, initialSupply);
   *         }
   *     }
   */
  Bytes erc20bytecode = Hex::toBytes("0x608060405234801561000f575f5ffd5b50604051610a83380380610a8383398101604081905261002e91610204565b604051806040016040528060098152602001682a32b9ba2a37b5b2b760b91b815250604051806040016040528060038152602001621514d560ea1b815250816003908161007b91906102b3565b50600461008882826102b3565b50505061009b33826100a160201b60201c565b50610392565b6001600160a01b0382166100cf5760405163ec442f0560e01b81525f60048201526024015b60405180910390fd5b6100da5f83836100de565b5050565b6001600160a01b038316610108578060025f8282546100fd919061036d565b909155506101789050565b6001600160a01b0383165f908152602081905260409020548181101561015a5760405163391434e360e21b81526001600160a01b038516600482015260248101829052604481018390526064016100c6565b6001600160a01b0384165f9081526020819052604090209082900390555b6001600160a01b038216610194576002805482900390556101b2565b6001600160a01b0382165f9081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516101f791815260200190565b60405180910390a3505050565b5f60208284031215610214575f5ffd5b5051919050565b634e487b7160e01b5f52604160045260245ffd5b600181811c9082168061024357607f821691505b60208210810361026157634e487b7160e01b5f52602260045260245ffd5b50919050565b601f8211156102ae57805f5260205f20601f840160051c8101602085101561028c5750805b601f840160051c820191505b818110156102ab575f8155600101610298565b50505b505050565b81516001600160401b038111156102cc576102cc61021b565b6102e0816102da845461022f565b84610267565b6020601f821160018114610312575f83156102fb5750848201515b5f19600385901b1c1916600184901b1784556102ab565b5f84815260208120601f198516915b828110156103415787850151825560209485019460019092019101610321565b508482101561035e57868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b8082018082111561038c57634e487b7160e01b5f52601160045260245ffd5b92915050565b6106e48061039f5f395ff3fe608060405234801561000f575f5ffd5b5060043610610090575f3560e01c8063313ce56711610063578063313ce567146100fa57806370a082311461010957806395d89b4114610131578063a9059cbb14610139578063dd62ed3e1461014c575f5ffd5b806306fdde0314610094578063095ea7b3146100b257806318160ddd146100d557806323b872dd146100e7575b5f5ffd5b61009c610184565b6040516100a99190610554565b60405180910390f35b6100c56100c03660046105a4565b610214565b60405190151581526020016100a9565b6002545b6040519081526020016100a9565b6100c56100f53660046105cc565b61022d565b604051601281526020016100a9565b6100d9610117366004610606565b6001600160a01b03165f9081526020819052604090205490565b61009c610250565b6100c56101473660046105a4565b61025f565b6100d961015a366004610626565b6001600160a01b039182165f90815260016020908152604080832093909416825291909152205490565b60606003805461019390610657565b80601f01602080910402602001604051908101604052809291908181526020018280546101bf90610657565b801561020a5780601f106101e15761010080835404028352916020019161020a565b820191905f5260205f20905b8154815290600101906020018083116101ed57829003601f168201915b5050505050905090565b5f3361022181858561026c565b60019150505b92915050565b5f3361023a85828561027e565b6102458585856102ff565b506001949350505050565b60606004805461019390610657565b5f336102218185856102ff565b610279838383600161035c565b505050565b6001600160a01b038381165f908152600160209081526040808320938616835292905220545f198110156102f957818110156102eb57604051637dc7a0d960e11b81526001600160a01b038416600482015260248101829052604481018390526064015b60405180910390fd5b6102f984848484035f61035c565b50505050565b6001600160a01b03831661032857604051634b637e8f60e11b81525f60048201526024016102e2565b6001600160a01b0382166103515760405163ec442f0560e01b81525f60048201526024016102e2565b61027983838361042e565b6001600160a01b0384166103855760405163e602df0560e01b81525f60048201526024016102e2565b6001600160a01b0383166103ae57604051634a1406b160e11b81525f60048201526024016102e2565b6001600160a01b038085165f90815260016020908152604080832093871683529290522082905580156102f957826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161042091815260200190565b60405180910390a350505050565b6001600160a01b038316610458578060025f82825461044d919061068f565b909155506104c89050565b6001600160a01b0383165f90815260208190526040902054818110156104aa5760405163391434e360e21b81526001600160a01b038516600482015260248101829052604481018390526064016102e2565b6001600160a01b0384165f9081526020819052604090209082900390555b6001600160a01b0382166104e457600280548290039055610502565b6001600160a01b0382165f9081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161054791815260200190565b60405180910390a3505050565b602081525f82518060208401528060208501604085015e5f604082850101526040601f19601f83011684010191505092915050565b80356001600160a01b038116811461059f575f5ffd5b919050565b5f5f604083850312156105b5575f5ffd5b6105be83610589565b946020939093013593505050565b5f5f5f606084860312156105de575f5ffd5b6105e784610589565b92506105f560208501610589565b929592945050506040919091013590565b5f60208284031215610616575f5ffd5b61061f82610589565b9392505050565b5f5f60408385031215610637575f5ffd5b61064083610589565b915061064e60208401610589565b90509250929050565b600181811c9082168061066b57607f821691505b60208210810361068957634e487b7160e01b5f52602260045260245ffd5b50919050565b8082018082111561022757634e487b7160e01b5f52601160045260245ffdfea2646970667358221220bb38ab6ed96fe17d4ed0a99dfd8e243ce4bbdf7ea8720be32ba90fcd2ab15d6264736f6c634300081e003300000000000000000000000000000000000000000000021e19e0c9bab2400000");

  /**
   * ERC20Wrapper:
   *     pragma solidity ^0.8.0;
   *
   *     import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
   *
   *     contract ERC20Wrapper {
   *       // Nested mapping to hold user balances for each token
   *       mapping(address => mapping(address => uint256)) private _balances;
   *
   *       // Event declarations for Deposits and Withdrawals
   *       event Deposit(address indexed user, address indexed token, uint256 amount);
   *       event Withdrawal(address indexed user, address indexed token, uint256 amount);
   *
   *       // Function to deposit ERC20 tokens into this contract
   *       function deposit(address token, uint256 amount) public {
   *         require(amount > 0, "Amount must be greater than zero");
   *         require(IERC20(token).transferFrom(msg.sender, address(this), amount), "Transfer failed");
   *
   *         _balances[msg.sender][token] += amount;
   *         emit Deposit(msg.sender, token, amount);
   *       }
   *
   *       // Function to withdraw ERC20 tokens from this contract
   *       function withdraw(address token, uint256 amount) public {
   *         require(amount > 0, "Amount must be greater than zero");
   *         require(_balances[msg.sender][token] >= amount, "Insufficient balance");
   *
   *         _balances[msg.sender][token] -= amount;
   *         require(IERC20(token).transfer(msg.sender, amount), "Transfer failed");
   *
   *         emit Withdrawal(msg.sender, token, amount);
   *       }
   *
   *       // Function to check the balance of a user for a specific token
   *       function balanceOf(address user, address token) public view returns (uint256) {
   *         return _balances[user][token];
   *       }
   *
   *       // Function to check the balance of this contract for a specific token
   *       function contractBalance(address token) public view returns (uint256) {
   *         return IERC20(token).balanceOf(address(this));
   *       }
   *     }
   */


  const Bytes sandTokenBytecode = Utils::makeBytes(bytes::hex("0x608060405234801562000010575f80fd5b506040518060400160405280600981526020017f53616e64546f6b656e00000000000000000000000000000000000000000000008152506040518060400160405280600481526020017f53414e440000000000000000000000000000000000000000000000000000000081525081600390816200008e91906200034d565b508060049081620000a091906200034d565b5050503360055f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062000431565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806200016557607f821691505b6020821081036200017b576200017a62000120565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302620001df7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620001a2565b620001eb8683620001a2565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f620002356200022f620002298462000203565b6200020c565b62000203565b9050919050565b5f819050919050565b620002508362000215565b620002686200025f826200023c565b848454620001ae565b825550505050565b5f90565b6200027e62000270565b6200028b81848462000245565b505050565b5b81811015620002b257620002a65f8262000274565b60018101905062000291565b5050565b601f8211156200030157620002cb8162000181565b620002d68462000193565b81016020851015620002e6578190505b620002fe620002f58562000193565b83018262000290565b50505b505050565b5f82821c905092915050565b5f620003235f198460080262000306565b1980831691505092915050565b5f6200033d838362000312565b9150826002028217905092915050565b6200035882620000e9565b67ffffffffffffffff811115620003745762000373620000f3565b5b6200038082546200014d565b6200038d828285620002b6565b5f60209050601f831160018114620003c3575f8415620003ae578287015190505b620003ba858262000330565b86555062000429565b601f198416620003d38662000181565b5f5b82811015620003fc57848901518255600182019150602085019450602081019050620003d5565b868310156200041c578489015162000418601f89168262000312565b8355505b6001600288020188555050505b505050505050565b6112e1806200043f5f395ff3fe608060405260043610610094575f3560e01c8063313ce56711610058578063313ce5671461029357806370a08231146102bd57806395d89b41146102f9578063a9059cbb14610323578063dd62ed3e1461035f5761019b565b806306fdde031461019f578063095ea7b3146101c957806318160ddd1461020557806323b872dd1461022f5780632e1a7d4d1461026b5761019b565b3661019b575f60646002346100a99190610d94565b6100b39190610e02565b90505f612648346100c49190610d94565b90506100d0338261039b565b5f60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168360405161011690610e5f565b5f6040518083038185875af1925050503d805f8114610150576040519150601f19603f3d011682016040523d82523d5f602084013e610155565b606091505b5050905080610199576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161019090610ecd565b60405180910390fd5b005b5f80fd5b3480156101aa575f80fd5b506101b361041a565b6040516101c09190610f65565b60405180910390f35b3480156101d4575f80fd5b506101ef60048036038101906101ea919061100d565b6104aa565b6040516101fc9190611065565b60405180910390f35b348015610210575f80fd5b506102196104cc565b604051610226919061108d565b60405180910390f35b34801561023a575f80fd5b50610255600480360381019061025091906110a6565b6104d5565b6040516102629190611065565b60405180910390f35b348015610276575f80fd5b50610291600480360381019061028c91906110f6565b610503565b005b34801561029e575f80fd5b506102a76105da565b6040516102b4919061113c565b60405180910390f35b3480156102c8575f80fd5b506102e360048036038101906102de9190611155565b6105e2565b6040516102f0919061108d565b60405180910390f35b348015610304575f80fd5b5061030d610627565b60405161031a9190610f65565b60405180910390f35b34801561032e575f80fd5b506103496004803603810190610344919061100d565b6106b7565b6040516103569190611065565b60405180910390f35b34801561036a575f80fd5b5061038560048036038101906103809190611180565b6106d9565b604051610392919061108d565b60405180910390f35b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361040b575f6040517fec442f0500000000000000000000000000000000000000000000000000000000815260040161040291906111cd565b60405180910390fd5b6104165f838361075b565b5050565b60606003805461042990611213565b80601f016020809104026020016040519081016040528092919081815260200182805461045590611213565b80156104a05780601f10610477576101008083540402835291602001916104a0565b820191905f5260205f20905b81548152906001019060200180831161048357829003601f168201915b5050505050905090565b5f806104b4610974565b90506104c181858561097b565b600191505092915050565b5f600254905090565b5f806104df610974565b90506104ec85828561098d565b6104f7858585610a20565b60019150509392505050565b8061050d336105e2565b1015610517575f80fd5b6105213382610b10565b5f3373ffffffffffffffffffffffffffffffffffffffff16612710836105479190610e02565b60405161055390610e5f565b5f6040518083038185875af1925050503d805f811461058d576040519150601f19603f3d011682016040523d82523d5f602084013e610592565b606091505b50509050806105d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105cd90610ecd565b60405180910390fd5b5050565b5f6012905090565b5f805f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b60606004805461063690611213565b80601f016020809104026020016040519081016040528092919081815260200182805461066290611213565b80156106ad5780601f10610684576101008083540402835291602001916106ad565b820191905f5260205f20905b81548152906001019060200180831161069057829003601f168201915b5050505050905090565b5f806106c1610974565b90506106ce818585610a20565b600191505092915050565b5f60015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905092915050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036107ab578060025f82825461079f9190611243565b92505081905550610879565b5f805f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905081811015610834578381836040517fe450d38c00000000000000000000000000000000000000000000000000000000815260040161082b93929190611276565b60405180910390fd5b8181035f808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550505b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036108c0578060025f828254039250508190555061090a565b805f808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610967919061108d565b60405180910390a3505050565b5f33905090565b6109888383836001610b8f565b505050565b5f61099884846106d9565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811015610a1a5781811015610a0b578281836040517ffb8f41b2000000000000000000000000000000000000000000000000000000008152600401610a0293929190611276565b60405180910390fd5b610a1984848484035f610b8f565b5b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610a90575f6040517f96c6fd1e000000000000000000000000000000000000000000000000000000008152600401610a8791906111cd565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610b00575f6040517fec442f05000000000000000000000000000000000000000000000000000000008152600401610af791906111cd565b60405180910390fd5b610b0b83838361075b565b505050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610b80575f6040517f96c6fd1e000000000000000000000000000000000000000000000000000000008152600401610b7791906111cd565b60405180910390fd5b610b8b825f8361075b565b5050565b5f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610bff575f6040517fe602df05000000000000000000000000000000000000000000000000000000008152600401610bf691906111cd565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610c6f575f6040517f94280d62000000000000000000000000000000000000000000000000000000008152600401610c6691906111cd565b60405180910390fd5b8160015f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508015610d58578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92584604051610d4f919061108d565b60405180910390a35b50505050565b5f819050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f610d9e82610d5e565b9150610da983610d5e565b9250828202610db781610d5e565b91508282048414831517610dce57610dcd610d67565b5b5092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f610e0c82610d5e565b9150610e1783610d5e565b925082610e2757610e26610dd5565b5b828204905092915050565b5f81905092915050565b50565b5f610e4a5f83610e32565b9150610e5582610e3c565b5f82019050919050565b5f610e6982610e3f565b9150819050919050565b5f82825260208201905092915050565b7f5472616e73666572204661696c656400000000000000000000000000000000005f82015250565b5f610eb7600f83610e73565b9150610ec282610e83565b602082019050919050565b5f6020820190508181035f830152610ee481610eab565b9050919050565b5f81519050919050565b5f5b83811015610f12578082015181840152602081019050610ef7565b5f8484015250505050565b5f601f19601f8301169050919050565b5f610f3782610eeb565b610f418185610e73565b9350610f51818560208601610ef5565b610f5a81610f1d565b840191505092915050565b5f6020820190508181035f830152610f7d8184610f2d565b905092915050565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610fb282610f89565b9050919050565b610fc281610fa8565b8114610fcc575f80fd5b50565b5f81359050610fdd81610fb9565b92915050565b610fec81610d5e565b8114610ff6575f80fd5b50565b5f8135905061100781610fe3565b92915050565b5f806040838503121561102357611022610f85565b5b5f61103085828601610fcf565b925050602061104185828601610ff9565b9150509250929050565b5f8115159050919050565b61105f8161104b565b82525050565b5f6020820190506110785f830184611056565b92915050565b61108781610d5e565b82525050565b5f6020820190506110a05f83018461107e565b92915050565b5f805f606084860312156110bd576110bc610f85565b5b5f6110ca86828701610fcf565b93505060206110db86828701610fcf565b92505060406110ec86828701610ff9565b9150509250925092565b5f6020828403121561110b5761110a610f85565b5b5f61111884828501610ff9565b91505092915050565b5f60ff82169050919050565b61113681611121565b82525050565b5f60208201905061114f5f83018461112d565b92915050565b5f6020828403121561116a57611169610f85565b5b5f61117784828501610fcf565b91505092915050565b5f806040838503121561119657611195610f85565b5b5f6111a385828601610fcf565b92505060206111b485828601610fcf565b9150509250929050565b6111c781610fa8565b82525050565b5f6020820190506111e05f8301846111be565b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061122a57607f821691505b60208210810361123d5761123c6111e6565b5b50919050565b5f61124d82610d5e565b915061125883610d5e565b92508282019050808211156112705761126f610d67565b5b92915050565b5f6060820190506112895f8301866111be565b611296602083018561107e565b6112a3604083018461107e565b94935050505056fea264697066735822122080ad2b31426bc3c16db31db58cc6ac3e1279ac6376aa2b071d37864b77af696e64736f6c63430008160033"));

  // Due to C++ template mechanics, we can feed C++ functions to templates
  // But these functions needs to have the same Solidity declaration
  // Basically, an interface, but with minimal definition so the compiler doesnt go undefined
  class SolERC20Wrapper {
    public:
      void deposit(const Address& token, const uint256_t& amount) {};
      void withdraw(const Address& token, const uint256_t& amount) {};
      uint256_t balanceOf(const Address& user, const Address& token) const { return 0; };
      uint256_t contractBalance(const Address& token) const { return 0; };
      void static registerContract() {
        ContractReflectionInterface::registerContractMethods<
          SolERC20Wrapper
        >(
          std::vector<std::string>{},
          std::make_tuple("deposit", &SolERC20Wrapper::deposit, FunctionTypes::View, std::vector<std::string>{"token", "amount"}),
          std::make_tuple("withdraw", &SolERC20Wrapper::withdraw, FunctionTypes::View, std::vector<std::string>{"token", "amount"}),
          std::make_tuple("balanceOf", &SolERC20Wrapper::balanceOf, FunctionTypes::View, std::vector<std::string>{"user","token"}),
          std::make_tuple("contractBalance", &SolERC20Wrapper::contractBalance, FunctionTypes::View, std::vector<std::string>{"token"})
        );
      }
  };

  struct SandTokenWrapper {
    uint256_t balanceOf(const Address& address) const { return 0; }

    void withdraw(const uint256_t& amount) {}

    void static registerContract() {
      ContractReflectionInterface::registerContractMethods<
        SandTokenWrapper
      >(
        std::vector<std::string>{},
        std::make_tuple("balanceOf", &SandTokenWrapper::balanceOf, FunctionTypes::View, std::vector<std::string>{"address"}),
        std::make_tuple("withdraw", &SandTokenWrapper::withdraw, FunctionTypes::NonPayable, std::vector<std::string>{"amount"})
      );
    }
  };

  Bytes erc20WrapperBytes = Hex::toBytes("0x6080604052348015600e575f80fd5b506105cd8061001c5f395ff3fe608060405234801561000f575f80fd5b506004361061004a575f3560e01c806347e7ef241461004e578063c53b770214610063578063f3fef3a314610088578063f7888aec1461009b575b5f80fd5b61006161005c3660046104ae565b6100d1565b005b6100766100713660046104d6565b610251565b60405190815260200160405180910390f35b6100616100963660046104ae565b6102bf565b6100766100a93660046104f6565b6001600160a01b039182165f9081526020818152604080832093909416825291909152205490565b5f81116101255760405162461bcd60e51b815260206004820181905260248201527f416d6f756e74206d7573742062652067726561746572207468616e207a65726f60448201526064015b60405180910390fd5b6040516323b872dd60e01b8152336004820152306024820152604481018290526001600160a01b038316906323b872dd906064016020604051808303815f875af1158015610175573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906101999190610527565b6101d75760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b604482015260640161011c565b335f908152602081815260408083206001600160a01b03861684529091528120805483929061020790849061055a565b90915550506040518181526001600160a01b0383169033907f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f62906020015b60405180910390a35050565b6040516370a0823160e01b81523060048201525f906001600160a01b038316906370a0823190602401602060405180830381865afa158015610295573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102b9919061056d565b92915050565b5f811161030e5760405162461bcd60e51b815260206004820181905260248201527f416d6f756e74206d7573742062652067726561746572207468616e207a65726f604482015260640161011c565b335f908152602081815260408083206001600160a01b03861684529091529020548111156103755760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b604482015260640161011c565b335f908152602081815260408083206001600160a01b0386168452909152812080548392906103a5908490610584565b909155505060405163a9059cbb60e01b8152336004820152602481018290526001600160a01b0383169063a9059cbb906044016020604051808303815f875af11580156103f4573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104189190610527565b6104565760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b604482015260640161011c565b6040518181526001600160a01b0383169033907f2717ead6b9200dd235aad468c9809ea400fe33ac69b5bfaa6d3e90fc922b639890602001610245565b80356001600160a01b03811681146104a9575f80fd5b919050565b5f80604083850312156104bf575f80fd5b6104c883610493565b946020939093013593505050565b5f602082840312156104e6575f80fd5b6104ef82610493565b9392505050565b5f8060408385031215610507575f80fd5b61051083610493565b915061051e60208401610493565b90509250929050565b5f60208284031215610537575f80fd5b815180151581146104ef575f80fd5b634e487b7160e01b5f52601160045260245ffd5b808201808211156102b9576102b9610546565b5f6020828403121561057d575f80fd5b5051919050565b818103818111156102b9576102b961054656fea2646970667358221220a682d87f949af3271670e7b8a26e66a974e4f99da4daccd6eeee9f51c980d6bb64736f6c63430008190033");
  TEST_CASE("EVM Tests", "[contract][evm]") {
    SECTION("ERC20 Creation + load from DB.") {
      std::unique_ptr<Options> options = nullptr;
      Address erc20Address = Address();
      {
        SDKTestSuite sdk = SDKTestSuite::createNewEnvironment("testERC20CreationEVM");
        // const TestAccount& from, const Address& to, const uint256_t& value, Bytes data = Bytes()
        erc20Address = sdk.deployBytecode(erc20bytecode);
        // Now for the funny part, we are NOT a C++ contract, but we can
        // definitely take advantage of the templated ABI to interact with it
        // as the encoding is the same

        REQUIRE(sdk.callViewFunction(erc20Address, &ERC20::name) == "TestToken");
        REQUIRE(sdk.callViewFunction(erc20Address, &ERC20::symbol) == "TST");
        REQUIRE(sdk.callViewFunction(erc20Address, &ERC20::decimals) == 18);
        REQUIRE(sdk.callViewFunction(erc20Address, &ERC20::totalSupply) == uint256_t("10000000000000000000000"));
        REQUIRE(sdk.callViewFunction(erc20Address, &ERC20::balanceOf, sdk.getChainOwnerAccount().address) == uint256_t("10000000000000000000000"));

        // Make a copy of the current options
        options = std::make_unique<Options>(sdk.getOptions());
        // Dump the state
        sdk.getState().saveToDB();
      }

      // SDKTestSuite should automatically load the state from the DB if we
      // Construct it with a options object
      // (The createNewEnvironment DELETES the DB if any is found)
      SDKTestSuite sdk(*options);

      REQUIRE(sdk.callViewFunction(erc20Address, &ERC20::name) == "TestToken");
      REQUIRE(sdk.callViewFunction(erc20Address, &ERC20::symbol) == "TST");
      REQUIRE(sdk.callViewFunction(erc20Address, &ERC20::decimals) == 18);
      REQUIRE(sdk.callViewFunction(erc20Address, &ERC20::totalSupply) == uint256_t("10000000000000000000000"));
    }

    SECTION("ERC20 transfer + load from DB.") {
      std::unique_ptr<Options> options = nullptr;
      Address erc20Address = Address();
      Address to(Utils::randBytes(20));
      {
        SDKTestSuite sdk = SDKTestSuite::createNewEnvironment("testERC20TransferEVM");
        // const TestAccount& from, const Address& to, const uint256_t& value, Bytes data = Bytes()
        erc20Address = sdk.deployBytecode(erc20bytecode);
        REQUIRE(sdk.callViewFunction(erc20Address, &ERC20::name) == "TestToken");
        REQUIRE(sdk.callViewFunction(erc20Address, &ERC20::symbol) == "TST");
        REQUIRE(sdk.callViewFunction(erc20Address, &ERC20::decimals) == 18);
        REQUIRE(sdk.callViewFunction(erc20Address, &ERC20::totalSupply) == uint256_t("10000000000000000000000"));
        REQUIRE(sdk.callViewFunction(erc20Address, &ERC20::balanceOf, sdk.getChainOwnerAccount().address) == uint256_t("10000000000000000000000"));
        Address owner = sdk.getChainOwnerAccount().address;

        uint256_t balanceMe = sdk.callViewFunction(erc20Address, &ERC20::balanceOf, owner);
        uint256_t balanceTo = sdk.callViewFunction(erc20Address, &ERC20::balanceOf, to);
        REQUIRE(balanceMe == uint256_t("10000000000000000000000")); // 10000 TST
        REQUIRE(balanceTo == 0);

        Hash transferTx = sdk.callFunction(erc20Address, &ERC20::transfer, to, uint256_t("5000000000000000000000")); // 5000 TST
        balanceMe = sdk.callViewFunction(erc20Address, &ERC20::balanceOf, owner);
        balanceTo = sdk.callViewFunction(erc20Address, &ERC20::balanceOf, to);
        REQUIRE(balanceMe == uint256_t("5000000000000000000000"));
        REQUIRE(balanceTo == uint256_t("5000000000000000000000"));

        // "owner" doesn't have enough balance, this should throw and balances should stay intact
        REQUIRE_THROWS(sdk.callFunction(erc20Address, &ERC20::transfer, to, uint256_t("5000000000000000000001")));

        balanceMe = sdk.callViewFunction(erc20Address, &ERC20::balanceOf, owner);
        balanceTo = sdk.callViewFunction(erc20Address, &ERC20::balanceOf, to);
        REQUIRE(balanceMe == uint256_t("5000000000000000000000"));
        REQUIRE(balanceTo == uint256_t("5000000000000000000000"));
        // Copy the SDK options
        options = std::make_unique<Options>(sdk.getOptions());
        sdk.getState().saveToDB();
      }

      SDKTestSuite sdk(*options);

      REQUIRE (sdk.callViewFunction(erc20Address, &ERC20::name) == "TestToken");
      REQUIRE (sdk.callViewFunction(erc20Address, &ERC20::symbol) == "TST");
      REQUIRE (sdk.callViewFunction(erc20Address, &ERC20::decimals) == 18);
      REQUIRE (sdk.callViewFunction(erc20Address, &ERC20::totalSupply) == uint256_t("10000000000000000000000"));
      REQUIRE (sdk.callViewFunction(erc20Address, &ERC20::balanceOf, sdk.getChainOwnerAccount().address) == uint256_t("5000000000000000000000"));
      REQUIRE (sdk.callViewFunction(erc20Address, &ERC20::balanceOf, to) == uint256_t("5000000000000000000000"));
    }

    SECTION("EVM -> CPP Calls (EVM ERC20Wrapper) + load from DB.") {
      std::unique_ptr<Options> options = nullptr;
      Address erc20Address = Address();
      Address erc20WrapperAddress = Address();
      {
        SDKTestSuite sdk = SDKTestSuite::createNewEnvironment("testEVMtoCPPcalls");
        erc20Address = sdk.deployContract<ERC20>(std::string("TestToken"), std::string("TST"), uint8_t(18), uint256_t("10000000000000000000000"));
        erc20WrapperAddress = sdk.deployBytecode(erc20WrapperBytes);

        sdk.callFunction(erc20Address, &ERC20::approve, erc20WrapperAddress, uint256_t("10000000000000000000000"));
        REQUIRE(sdk.callViewFunction(erc20Address, &ERC20::allowance, sdk.getChainOwnerAccount().address, erc20WrapperAddress) == uint256_t("10000000000000000000000"));

        REQUIRE(sdk.callViewFunction(erc20WrapperAddress, &SolERC20Wrapper::balanceOf, sdk.getChainOwnerAccount().address, erc20Address) == uint256_t("0"));
        REQUIRE(sdk.callViewFunction(erc20WrapperAddress, &SolERC20Wrapper::contractBalance, erc20Address) == uint256_t("0"));
        REQUIRE (sdk.callViewFunction(erc20Address, &ERC20::balanceOf, sdk.getChainOwnerAccount().address) == uint256_t("10000000000000000000000"));
        REQUIRE (sdk.callViewFunction(erc20Address, &ERC20::balanceOf, erc20WrapperAddress) == uint256_t("0"));

        auto deposit = sdk.callFunction(erc20WrapperAddress, &SolERC20Wrapper::deposit, erc20Address, uint256_t("10000000000000000000000"));
        REQUIRE(sdk.callViewFunction(erc20WrapperAddress, &SolERC20Wrapper::balanceOf, sdk.getChainOwnerAccount().address, erc20Address) == uint256_t("10000000000000000000000"));
        REQUIRE(sdk.callViewFunction(erc20WrapperAddress, &SolERC20Wrapper::contractBalance, erc20Address) == uint256_t("10000000000000000000000"));
        REQUIRE(sdk.callViewFunction(erc20Address, &ERC20::balanceOf, sdk.getChainOwnerAccount().address) == uint256_t("0"));
        REQUIRE(sdk.callViewFunction(erc20Address, &ERC20::balanceOf, erc20WrapperAddress) == uint256_t("10000000000000000000000"));

        // Withdraw the 1/3 of what we have deposited
        auto withdraw = sdk.callFunction(erc20WrapperAddress, &SolERC20Wrapper::withdraw, erc20Address, uint256_t("3333333333333333333333"));
        REQUIRE(sdk.callViewFunction(erc20WrapperAddress, &SolERC20Wrapper::balanceOf, sdk.getChainOwnerAccount().address, erc20Address) == uint256_t("6666666666666666666667"));
        REQUIRE(sdk.callViewFunction(erc20WrapperAddress, &SolERC20Wrapper::contractBalance, erc20Address) == uint256_t("6666666666666666666667"));
        REQUIRE(sdk.callViewFunction(erc20Address, &ERC20::balanceOf, sdk.getChainOwnerAccount().address) == uint256_t("3333333333333333333333"));
        REQUIRE(sdk.callViewFunction(erc20Address, &ERC20::balanceOf, erc20WrapperAddress) == uint256_t("6666666666666666666667"));

        options = std::make_unique<Options>(sdk.getOptions());
        sdk.getState().saveToDB();
      }

      SDKTestSuite sdk(*options);

      REQUIRE (sdk.callViewFunction(erc20Address, &ERC20::name) == "TestToken");
      REQUIRE (sdk.callViewFunction(erc20Address, &ERC20::symbol) == "TST");
      REQUIRE (sdk.callViewFunction(erc20Address, &ERC20::decimals) == 18);
      REQUIRE (sdk.callViewFunction(erc20Address, &ERC20::totalSupply) == uint256_t("10000000000000000000000"));

      REQUIRE (sdk.callViewFunction(erc20WrapperAddress, &SolERC20Wrapper::balanceOf, sdk.getChainOwnerAccount().address, erc20Address) == uint256_t("6666666666666666666667"));
      REQUIRE (sdk.callViewFunction(erc20WrapperAddress, &SolERC20Wrapper::contractBalance, erc20Address) == uint256_t("6666666666666666666667"));
      REQUIRE (sdk.callViewFunction(erc20Address, &ERC20::balanceOf, sdk.getChainOwnerAccount().address) == uint256_t("3333333333333333333333"));
      REQUIRE (sdk.callViewFunction(erc20Address, &ERC20::balanceOf, erc20WrapperAddress) == uint256_t("6666666666666666666667"));

    }

    SECTION("CPP -> EVM Calls (CPP ERC20Wrapper) + load from DB.") {
      std::unique_ptr<Options> options = nullptr;
      Address erc20Address = Address();
      Address erc20WrapperAddress = Address();
      {
        auto sdk = SDKTestSuite::createNewEnvironment("testCPPtoEVMcalls");
        erc20Address = sdk.deployBytecode(erc20bytecode);
        erc20WrapperAddress = sdk.deployContract<ERC20Wrapper>();

        sdk.callFunction(erc20Address, &ERC20::approve, erc20WrapperAddress, uint256_t("10000000000000000000000"));
        REQUIRE (sdk.callViewFunction(erc20Address, &ERC20::allowance, sdk.getChainOwnerAccount().address, erc20WrapperAddress) == uint256_t("10000000000000000000000"));

        REQUIRE (sdk.callViewFunction(erc20WrapperAddress, &ERC20Wrapper::getUserBalance, erc20Address, sdk.getChainOwnerAccount().address) == uint256_t("0"));
        REQUIRE (sdk.callViewFunction(erc20WrapperAddress, &ERC20Wrapper::getContractBalance, erc20Address) == uint256_t("0"));
        REQUIRE (sdk.callViewFunction(erc20Address, &ERC20::balanceOf, sdk.getChainOwnerAccount().address) == uint256_t("10000000000000000000000"));
        REQUIRE (sdk.callViewFunction(erc20Address, &ERC20::balanceOf, erc20WrapperAddress) == uint256_t("0"));

        auto deposit = sdk.callFunction(erc20WrapperAddress, &ERC20Wrapper::deposit, erc20Address, uint256_t("10000000000000000000000"));
        REQUIRE (sdk.callViewFunction(erc20WrapperAddress, &ERC20Wrapper::getUserBalance, erc20Address, sdk.getChainOwnerAccount().address) == uint256_t("10000000000000000000000"));
        REQUIRE (sdk.callViewFunction(erc20WrapperAddress, &ERC20Wrapper::getContractBalance, erc20Address) == uint256_t("10000000000000000000000"));
        REQUIRE (sdk.callViewFunction(erc20Address, &ERC20::balanceOf, sdk.getChainOwnerAccount().address) == uint256_t("0"));
        REQUIRE (sdk.callViewFunction(erc20Address, &ERC20::balanceOf, erc20WrapperAddress) == uint256_t("10000000000000000000000"));

        // Withdraw the 1/3 of what we have deposited
        auto withdraw = sdk.callFunction(erc20WrapperAddress, &ERC20Wrapper::withdraw, erc20Address, uint256_t("3333333333333333333333"));
        REQUIRE (sdk.callViewFunction(erc20WrapperAddress, &ERC20Wrapper::getUserBalance, erc20Address, sdk.getChainOwnerAccount().address) == uint256_t("6666666666666666666667"));
        REQUIRE (sdk.callViewFunction(erc20WrapperAddress, &ERC20Wrapper::getContractBalance, erc20Address) == uint256_t("6666666666666666666667"));
        REQUIRE (sdk.callViewFunction(erc20Address, &ERC20::balanceOf, sdk.getChainOwnerAccount().address) == uint256_t("3333333333333333333333"));
        REQUIRE (sdk.callViewFunction(erc20Address, &ERC20::balanceOf, erc20WrapperAddress) == uint256_t("6666666666666666666667"));

        options = std::make_unique<Options>(sdk.getOptions());
        sdk.getState().saveToDB();
      }

      SDKTestSuite sdk(*options);

      REQUIRE (sdk.callViewFunction(erc20Address, &ERC20::name) == "TestToken");
      REQUIRE (sdk.callViewFunction(erc20Address, &ERC20::symbol) == "TST");
      REQUIRE (sdk.callViewFunction(erc20Address, &ERC20::decimals) == 18);
      REQUIRE (sdk.callViewFunction(erc20Address, &ERC20::totalSupply) == uint256_t("10000000000000000000000"));

      REQUIRE (sdk.callViewFunction(erc20WrapperAddress, &ERC20Wrapper::getUserBalance, erc20Address, sdk.getChainOwnerAccount().address) == uint256_t("6666666666666666666667"));
      REQUIRE (sdk.callViewFunction(erc20WrapperAddress, &ERC20Wrapper::getContractBalance, erc20Address) == uint256_t("6666666666666666666667"));
      REQUIRE (sdk.callViewFunction(erc20Address, &ERC20::balanceOf, sdk.getChainOwnerAccount().address) == uint256_t("3333333333333333333333"));
      REQUIRE (sdk.callViewFunction(erc20Address, &ERC20::balanceOf, erc20WrapperAddress) == uint256_t("6666666666666666666667"));
    }

    SECTION("SandToken use case") {
      const TestAccount user = TestAccount::newRandomAccount();
      auto sdk = SDKTestSuite::createNewEnvironment("SandToken", {user});
      const TestAccount owner = sdk.getChainOwnerAccount();
      const Address token = sdk.deployBytecode(sandTokenBytecode);

      const uint256_t value = 100'000'000'000;
      const uint256_t expectedTax = value / 50;

      auto tx = sdk.createNewTx(user, token, value);

      uint256_t balanceBefore = sdk.getNativeBalance(owner.address);

      sdk.advanceChain(0, {tx});

      uint256_t balanceAfter = sdk.getNativeBalance(owner.address);

      REQUIRE(balanceBefore + expectedTax == balanceAfter);
      REQUIRE((value - expectedTax) * 10'000 == sdk.callViewFunction(token, &SandTokenWrapper::balanceOf, user.address));

      const uint256_t expectedGasUsed = 42'433'000'000'000;
      
      balanceBefore = sdk.getNativeBalance(user.address);
      
      sdk.callFunction(token, 0, user, 0, &SandTokenWrapper::withdraw, uint256_t((value - expectedTax) * 10'000));
      
      balanceAfter = sdk.getNativeBalance(user.address);

      REQUIRE(0 == sdk.callViewFunction(token, &SandTokenWrapper::balanceOf, user.address));
    }
  }
}
