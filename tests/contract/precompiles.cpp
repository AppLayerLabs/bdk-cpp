/*
Copyright (c) [2023-2024] [AppLayer Developers]

This software is distributed under the MIT License.
See the LICENSE.txt file in the project root for more information.
*/

#include "libs/catch2/catch_amalgamated.hpp"
#include "contract/precompiles.h"
#include "bytes/hex.h"
#include "../sdktestsuite.hpp"

namespace TPRECOMPILES {

const Bytes BYTECODE = Utils::makeBytes(bytes::hex("60806040527f5ffa7c26a64500657f3786514cf062ddd52098f30000000000000000000000006000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908360601c021790555034801561005d57600080fd5b5061088f8061006d6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063265dc68c146100515780632dbe5cfe14610081578063ad0eb88c146100b1578063b49fd023146100e1575b600080fd5b61006b60048036038101906100669190610380565b610111565b6040516100789190610428565b60405180910390f35b61009b60048036038101906100969190610589565b6101e0565b6040516100a89190610651565b60405180910390f35b6100cb60048036038101906100c69190610589565b610264565b6040516100d89190610682565b60405180910390f35b6100fb60048036038101906100f69190610589565b6102bd565b60405161010891906106d8565b60405180910390f35b600080600186868686604051600081526020016040526040516101379493929190610702565b6020604051602081039080840390855afa158015610159573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036101d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101cb906107a4565b60405180910390fd5b80915050949350505050565b6060600080600473ffffffffffffffffffffffffffffffffffffffff168460405161020b9190610800565b600060405180830381855afa9150503d8060008114610246576040519150601f19603f3d011682016040523d82523d6000602084013e61024b565b606091505b50915091508161025a57600080fd5b8092505050919050565b60006002826040516102769190610800565b602060405180830381855afa158015610293573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906102b6919061082c565b9050919050565b60006003826040516102cf9190610800565b602060405180830381855afa1580156102ec573d6000803e3d6000fd5b5050506040515160601b9050919050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61032481610311565b811461032f57600080fd5b50565b6000813590506103418161031b565b92915050565b600060ff82169050919050565b61035d81610347565b811461036857600080fd5b50565b60008135905061037a81610354565b92915050565b6000806000806080858703121561039a57610399610307565b5b60006103a887828801610332565b94505060206103b98782880161036b565b93505060406103ca87828801610332565b92505060606103db87828801610332565b91505092959194509250565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610412826103e7565b9050919050565b61042281610407565b82525050565b600060208201905061043d6000830184610419565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6104968261044d565b810181811067ffffffffffffffff821117156104b5576104b461045e565b5b80604052505050565b60006104c86102fd565b90506104d4828261048d565b919050565b600067ffffffffffffffff8211156104f4576104f361045e565b5b6104fd8261044d565b9050602081019050919050565b82818337600083830152505050565b600061052c610527846104d9565b6104be565b90508281526020810184848401111561054857610547610448565b5b61055384828561050a565b509392505050565b600082601f8301126105705761056f610443565b5b8135610580848260208601610519565b91505092915050565b60006020828403121561059f5761059e610307565b5b600082013567ffffffffffffffff8111156105bd576105bc61030c565b5b6105c98482850161055b565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561060c5780820151818401526020810190506105f1565b60008484015250505050565b6000610623826105d2565b61062d81856105dd565b935061063d8185602086016105ee565b6106468161044d565b840191505092915050565b6000602082019050818103600083015261066b8184610618565b905092915050565b61067c81610311565b82525050565b60006020820190506106976000830184610673565b92915050565b60007fffffffffffffffffffffffffffffffffffffffff00000000000000000000000082169050919050565b6106d28161069d565b82525050565b60006020820190506106ed60008301846106c9565b92915050565b6106fc81610347565b82525050565b60006080820190506107176000830187610673565b61072460208301866106f3565b6107316040830185610673565b61073e6060830184610673565b95945050505050565b600082825260208201905092915050565b7f696e76616c6964207369676e6174757265000000000000000000000000000000600082015250565b600061078e601183610747565b915061079982610758565b602082019050919050565b600060208201905081810360008301526107bd81610781565b9050919050565b600081905092915050565b60006107da826105d2565b6107e481856107c4565b93506107f48185602086016105ee565b80840191505092915050565b600061080c82846107cf565b915081905092915050565b6000815190506108268161031b565b92915050565b60006020828403121561084257610841610307565b5b600061085084828501610817565b9150509291505056fea2646970667358221220f4b350a26706175750cea1fcc5d835ce7441e43a410cfc6f1d0eec505e5ea71964736f6c63430008130033"));

struct PrecompilesCaller {
  Address callEcRecover(const Hash&, const uint8_t&, const Hash&, const Hash&) const { return Address{}; }

  Hash callSHA256(const Bytes&) const { return Hash{}; }

  Bytes20 callRIPEMD160(const Bytes&) const { return Bytes20{}; }

  Bytes callIdentity(const Bytes&) const { return Bytes{}; }

  static void registerContract() {
    ContractReflectionInterface::registerContractMethods<PrecompilesCaller>(
      std::vector<std::string>{},
      std::make_tuple("callEcRecover", &PrecompilesCaller::callEcRecover, FunctionTypes::View, std::vector<std::string>{"hash", "v", "r", "s"}),
      std::make_tuple("callSHA256", &PrecompilesCaller::callSHA256, FunctionTypes::View, std::vector<std::string>{"input"}),
      std::make_tuple("callRIPEMD160", &PrecompilesCaller::callRIPEMD160, FunctionTypes::View, std::vector<std::string>{"input"}),
      std::make_tuple("callIdentity", &PrecompilesCaller::callIdentity, FunctionTypes::View, std::vector<std::string>{"input"})
    );
  }
};

TEST_CASE("Precompiles", "[contract][precompiles]") {
  SECTION("valid ecrecover") {
    const Hash hash = bytes::hex("0x456e9aea5e197a1f1af7a3e85a3212fa4049a3ba34c2289b4c860fc0b0c64ef3");
    const uint8_t v = 28;
    const Hash r = bytes::hex("0x9242685bf161793cc25603c231bc2f568eb630ea16aa137d2664ac8038825608");
    const Hash s = bytes::hex("0x4f8ae3bd7535248d0bd448298cc2e2071e56992d0774dc340c368ae950852ada");

    const Address expectedResult = bytes::hex("0x7156526fbd7a3c72969b54f64e42c10fbb768c8a");

    REQUIRE(ecrecover(hash, v, r, s) == expectedResult);
  }

  SECTION("contract call for all precompiles") {
    SDKTestSuite sdk = SDKTestSuite::createNewEnvironment("TestEcRecoverCall");
    const Address contract = sdk.deployBytecode(BYTECODE);

    {
      const Hash hash = bytes::hex("0x456e9aea5e197a1f1af7a3e85a3212fa4049a3ba34c2289b4c860fc0b0c64ef3");
      const uint8_t v = 28;
      const Hash r = bytes::hex("0x9242685bf161793cc25603c231bc2f568eb630ea16aa137d2664ac8038825608");
      const Hash s = bytes::hex("0x4f8ae3bd7535248d0bd448298cc2e2071e56992d0774dc340c368ae950852ada");

      const Address expectedResult = bytes::hex("0x7156526fbd7a3c72969b54f64e42c10fbb768c8a");

      Address result = sdk.callViewFunction(contract, &PrecompilesCaller::callEcRecover, hash, v, r, s);

      REQUIRE(result == expectedResult);
    }

    {
      const Bytes input = Utils::makeBytes(bytes::hex("0xa8100ae6aa1940d0b663bb31cd466142ebbdbd5187131b92d93818987832eb89"));
      const Hash output = sdk.callViewFunction(contract, &PrecompilesCaller::callSHA256, input);
      const Hash expectedOutput = bytes::hex("0xc0b057f584795eff8b06d5e420e71d747587d20de836f501921fd1b5741f1283");

      REQUIRE(output == expectedOutput);
    }

    {
      const Bytes input = Utils::makeBytes(bytes::hex("0x2c0c45d3ecab80fe060e5f1d7057cd2f8de5e557"));

      const Bytes20 output = sdk.callViewFunction(contract, &PrecompilesCaller::callRIPEMD160, input);
      const Bytes20 expectedOutput = bytes::hex("0x1f853832265d16cb91fa64938c2f421fac8f6a87");

      REQUIRE(output == expectedOutput);
    }

    {
      const Bytes input = Utils::makeBytes(bytes::hex("0x1234567890"));
      const Bytes output = sdk.callViewFunction(contract, &PrecompilesCaller::callIdentity, input);

      REQUIRE(input == output);
    }

    
  }
}

} // namespace TABI
