/*
Copyright (c) [2023-2024] [AppLayer Developers]

This software is distributed under the MIT License.
See the LICENSE.txt file in the project root for more information.
*/

#include "libs/catch2/catch_amalgamated.hpp"
#include "contract/precompiles.h"
#include "bytes/hex.h"
#include "../sdktestsuite.hpp"

namespace TPRECOMPILES {

const Bytes BYTECODE = Utils::makeBytes(bytes::hex("608060405234801561001057600080fd5b50610764806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063265dc68c14610046578063ad0eb88c14610076578063b49fd023146100a6575b600080fd5b610060600480360381019061005b91906102c1565b6100d6565b60405161006d9190610369565b60405180910390f35b610090600480360381019061008b91906104ca565b6101a5565b60405161009d9190610522565b60405180910390f35b6100c060048036038101906100bb91906104ca565b6101fe565b6040516100cd9190610578565b60405180910390f35b600080600186868686604051600081526020016040526040516100fc94939291906105a2565b6020604051602081039080840390855afa15801561011e573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610199576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161019090610644565b60405180910390fd5b80915050949350505050565b60006002826040516101b791906106d5565b602060405180830381855afa1580156101d4573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906101f79190610701565b9050919050565b600060038260405161021091906106d5565b602060405180830381855afa15801561022d573d6000803e3d6000fd5b5050506040515160601b9050919050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61026581610252565b811461027057600080fd5b50565b6000813590506102828161025c565b92915050565b600060ff82169050919050565b61029e81610288565b81146102a957600080fd5b50565b6000813590506102bb81610295565b92915050565b600080600080608085870312156102db576102da610248565b5b60006102e987828801610273565b94505060206102fa878288016102ac565b935050604061030b87828801610273565b925050606061031c87828801610273565b91505092959194509250565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061035382610328565b9050919050565b61036381610348565b82525050565b600060208201905061037e600083018461035a565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6103d78261038e565b810181811067ffffffffffffffff821117156103f6576103f561039f565b5b80604052505050565b600061040961023e565b905061041582826103ce565b919050565b600067ffffffffffffffff8211156104355761043461039f565b5b61043e8261038e565b9050602081019050919050565b82818337600083830152505050565b600061046d6104688461041a565b6103ff565b90508281526020810184848401111561048957610488610389565b5b61049484828561044b565b509392505050565b600082601f8301126104b1576104b0610384565b5b81356104c184826020860161045a565b91505092915050565b6000602082840312156104e0576104df610248565b5b600082013567ffffffffffffffff8111156104fe576104fd61024d565b5b61050a8482850161049c565b91505092915050565b61051c81610252565b82525050565b60006020820190506105376000830184610513565b92915050565b60007fffffffffffffffffffffffffffffffffffffffff00000000000000000000000082169050919050565b6105728161053d565b82525050565b600060208201905061058d6000830184610569565b92915050565b61059c81610288565b82525050565b60006080820190506105b76000830187610513565b6105c46020830186610593565b6105d16040830185610513565b6105de6060830184610513565b95945050505050565b600082825260208201905092915050565b7f696e76616c6964207369676e6174757265000000000000000000000000000000600082015250565b600061062e6011836105e7565b9150610639826105f8565b602082019050919050565b6000602082019050818103600083015261065d81610621565b9050919050565b600081519050919050565b600081905092915050565b60005b8381101561069857808201518184015260208101905061067d565b60008484015250505050565b60006106af82610664565b6106b9818561066f565b93506106c981856020860161067a565b80840191505092915050565b60006106e182846106a4565b915081905092915050565b6000815190506106fb8161025c565b92915050565b60006020828403121561071757610716610248565b5b6000610725848285016106ec565b9150509291505056fea264697066735822122096c95a7fded4772ad8616377cf1d7a3272c7e77ca828c4b19917ac1ae6650c8164736f6c63430008130033"));

struct PrecompilesCaller {
  Address callEcRecover(const Hash&, const uint8_t&, const Hash&, const Hash&) const { return Address{}; }

  Hash callSHA256(const Bytes&) const { return Hash{}; }

  Bytes20 callRIPEMD160(const Bytes&) const { return Bytes20{}; }

  static void registerContract() {
    ContractReflectionInterface::registerContractMethods<PrecompilesCaller>(
      std::vector<std::string>{},
      std::make_tuple("callEcRecover", &PrecompilesCaller::callEcRecover, FunctionTypes::View, std::vector<std::string>{"hash", "v", "r", "s"}),
      std::make_tuple("callSHA256", &PrecompilesCaller::callSHA256, FunctionTypes::View, std::vector<std::string>{"input"}),
      std::make_tuple("callRIPEMD160", &PrecompilesCaller::callRIPEMD160, FunctionTypes::View, std::vector<std::string>{"input"})
    );
  }
};

TEST_CASE("Precompiles", "[contract][precompiles]") {
  SECTION("valid ecrecover") {
    const Hash hash = bytes::hex("0x456e9aea5e197a1f1af7a3e85a3212fa4049a3ba34c2289b4c860fc0b0c64ef3");
    const uint8_t v = 28;
    const Hash r = bytes::hex("0x9242685bf161793cc25603c231bc2f568eb630ea16aa137d2664ac8038825608");
    const Hash s = bytes::hex("0x4f8ae3bd7535248d0bd448298cc2e2071e56992d0774dc340c368ae950852ada");

    const Address expectedResult = bytes::hex("0x7156526fbd7a3c72969b54f64e42c10fbb768c8a");

    REQUIRE(ecrecover(hash, v, r, s) == expectedResult);
  }

  SECTION("contract call for all precompiles") {
    SDKTestSuite sdk = SDKTestSuite::createNewEnvironment("TestEcRecoverCall");
    const Address contract = sdk.deployBytecode(BYTECODE);

    {
      const Hash hash = bytes::hex("0x456e9aea5e197a1f1af7a3e85a3212fa4049a3ba34c2289b4c860fc0b0c64ef3");
      const uint8_t v = 28;
      const Hash r = bytes::hex("0x9242685bf161793cc25603c231bc2f568eb630ea16aa137d2664ac8038825608");
      const Hash s = bytes::hex("0x4f8ae3bd7535248d0bd448298cc2e2071e56992d0774dc340c368ae950852ada");

      const Address expectedResult = bytes::hex("0x7156526fbd7a3c72969b54f64e42c10fbb768c8a");

      Address result = sdk.callViewFunction(contract, &PrecompilesCaller::callEcRecover, hash, v, r, s);

      REQUIRE(result == expectedResult);
    }

    {
      const Bytes input = Utils::makeBytes(bytes::hex("0xa8100ae6aa1940d0b663bb31cd466142ebbdbd5187131b92d93818987832eb89"));
      const Hash output = sdk.callViewFunction(contract, &PrecompilesCaller::callSHA256, input);
      const Hash expectedOutput = bytes::hex("0xc0b057f584795eff8b06d5e420e71d747587d20de836f501921fd1b5741f1283");

      REQUIRE(output == expectedOutput);
    }

    {
      const Bytes input = Utils::makeBytes(bytes::hex("0x2c0c45d3ecab80fe060e5f1d7057cd2f8de5e557"));

      const Bytes20 output = sdk.callViewFunction(contract, &PrecompilesCaller::callRIPEMD160, input);
      const Bytes20 expectedOutput = bytes::hex("0x1f853832265d16cb91fa64938c2f421fac8f6a87");

      REQUIRE(output == expectedOutput);
    }
  }
}

} // namespace TABI
