/*
Copyright (c) [2023-2024] [AppLayer Developers]

This software is distributed under the MIT License.
See the LICENSE.txt file in the project root for more information.
*/

#include "libs/catch2/catch_amalgamated.hpp"
#include "contract/precompiles.h"
#include "bytes/hex.h"
#include "../sdktestsuite.hpp"

namespace TPRECOMPILES {

const Bytes BYTECODE = Utils::makeBytes(bytes::hex("0x608060405234801561001057600080fd5b50610693806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063265dc68c1461003b578063ad0eb88c1461006b575b600080fd5b61005560048036038101906100509190610246565b61009b565b60405161006291906102ee565b60405180910390f35b6100856004803603810190610080919061044f565b61016a565b60405161009291906104a7565b60405180910390f35b600080600186868686604051600081526020016040526040516100c194939291906104d1565b6020604051602081039080840390855afa1580156100e3573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361015e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161015590610573565b60405180910390fd5b80915050949350505050565b600060028260405161017c9190610604565b602060405180830381855afa158015610199573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906101bc9190610630565b9050919050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6101ea816101d7565b81146101f557600080fd5b50565b600081359050610207816101e1565b92915050565b600060ff82169050919050565b6102238161020d565b811461022e57600080fd5b50565b6000813590506102408161021a565b92915050565b600080600080608085870312156102605761025f6101cd565b5b600061026e878288016101f8565b945050602061027f87828801610231565b9350506040610290878288016101f8565b92505060606102a1878288016101f8565b91505092959194509250565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006102d8826102ad565b9050919050565b6102e8816102cd565b82525050565b600060208201905061030360008301846102df565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61035c82610313565b810181811067ffffffffffffffff8211171561037b5761037a610324565b5b80604052505050565b600061038e6101c3565b905061039a8282610353565b919050565b600067ffffffffffffffff8211156103ba576103b9610324565b5b6103c382610313565b9050602081019050919050565b82818337600083830152505050565b60006103f26103ed8461039f565b610384565b90508281526020810184848401111561040e5761040d61030e565b5b6104198482856103d0565b509392505050565b600082601f83011261043657610435610309565b5b81356104468482602086016103df565b91505092915050565b600060208284031215610465576104646101cd565b5b600082013567ffffffffffffffff811115610483576104826101d2565b5b61048f84828501610421565b91505092915050565b6104a1816101d7565b82525050565b60006020820190506104bc6000830184610498565b92915050565b6104cb8161020d565b82525050565b60006080820190506104e66000830187610498565b6104f360208301866104c2565b6105006040830185610498565b61050d6060830184610498565b95945050505050565b600082825260208201905092915050565b7f696e76616c6964207369676e6174757265000000000000000000000000000000600082015250565b600061055d601183610516565b915061056882610527565b602082019050919050565b6000602082019050818103600083015261058c81610550565b9050919050565b600081519050919050565b600081905092915050565b60005b838110156105c75780820151818401526020810190506105ac565b60008484015250505050565b60006105de82610593565b6105e8818561059e565b93506105f88185602086016105a9565b80840191505092915050565b600061061082846105d3565b915081905092915050565b60008151905061062a816101e1565b92915050565b600060208284031215610646576106456101cd565b5b60006106548482850161061b565b9150509291505056fea2646970667358221220a865252dfd0f0cc67298deb0c1b88467e6ffe33b76c7b3c3ce89a21e2e43e7cc64736f6c63430008130033"));

struct PrecompilesCaller {
  Address callEcRecover(const Hash&, const uint8_t&, const Hash&, const Hash&) const { return Address{}; }

  Hash callSHA256(const Bytes&) const { return Hash{}; }

  static void registerContract() {
    ContractReflectionInterface::registerContractMethods<PrecompilesCaller>(
      std::vector<std::string>{},
      std::make_tuple("callEcRecover", &PrecompilesCaller::callEcRecover, FunctionTypes::View, std::vector<std::string>{"hash", "v", "r", "s"}),
      std::make_tuple("callSHA256", &PrecompilesCaller::callSHA256, FunctionTypes::View, std::vector<std::string>{"input"})
    );
  }
};

TEST_CASE("Precompiles", "[contract][precompiles]") {
  SECTION("valid ecrecover") {
    const Hash hash = bytes::hex("0x456e9aea5e197a1f1af7a3e85a3212fa4049a3ba34c2289b4c860fc0b0c64ef3");
    const uint8_t v = 28;
    const Hash r = bytes::hex("0x9242685bf161793cc25603c231bc2f568eb630ea16aa137d2664ac8038825608");
    const Hash s = bytes::hex("0x4f8ae3bd7535248d0bd448298cc2e2071e56992d0774dc340c368ae950852ada");

    const Address expectedResult = bytes::hex("0x7156526fbd7a3c72969b54f64e42c10fbb768c8a");

    REQUIRE(ecrecover(hash, v, r, s) == expectedResult);
  }

  SECTION("contract call for all precompiles") {
    const Bytes bytecode = Utils::makeBytes(bytes::hex("0x608060405234801561001057600080fd5b50610693806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063265dc68c1461003b578063ad0eb88c1461006b575b600080fd5b61005560048036038101906100509190610246565b61009b565b60405161006291906102ee565b60405180910390f35b6100856004803603810190610080919061044f565b61016a565b60405161009291906104a7565b60405180910390f35b600080600186868686604051600081526020016040526040516100c194939291906104d1565b6020604051602081039080840390855afa1580156100e3573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361015e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161015590610573565b60405180910390fd5b80915050949350505050565b600060028260405161017c9190610604565b602060405180830381855afa158015610199573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906101bc9190610630565b9050919050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6101ea816101d7565b81146101f557600080fd5b50565b600081359050610207816101e1565b92915050565b600060ff82169050919050565b6102238161020d565b811461022e57600080fd5b50565b6000813590506102408161021a565b92915050565b600080600080608085870312156102605761025f6101cd565b5b600061026e878288016101f8565b945050602061027f87828801610231565b9350506040610290878288016101f8565b92505060606102a1878288016101f8565b91505092959194509250565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006102d8826102ad565b9050919050565b6102e8816102cd565b82525050565b600060208201905061030360008301846102df565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61035c82610313565b810181811067ffffffffffffffff8211171561037b5761037a610324565b5b80604052505050565b600061038e6101c3565b905061039a8282610353565b919050565b600067ffffffffffffffff8211156103ba576103b9610324565b5b6103c382610313565b9050602081019050919050565b82818337600083830152505050565b60006103f26103ed8461039f565b610384565b90508281526020810184848401111561040e5761040d61030e565b5b6104198482856103d0565b509392505050565b600082601f83011261043657610435610309565b5b81356104468482602086016103df565b91505092915050565b600060208284031215610465576104646101cd565b5b600082013567ffffffffffffffff811115610483576104826101d2565b5b61048f84828501610421565b91505092915050565b6104a1816101d7565b82525050565b60006020820190506104bc6000830184610498565b92915050565b6104cb8161020d565b82525050565b60006080820190506104e66000830187610498565b6104f360208301866104c2565b6105006040830185610498565b61050d6060830184610498565b95945050505050565b600082825260208201905092915050565b7f696e76616c6964207369676e6174757265000000000000000000000000000000600082015250565b600061055d601183610516565b915061056882610527565b602082019050919050565b6000602082019050818103600083015261058c81610550565b9050919050565b600081519050919050565b600081905092915050565b60005b838110156105c75780820151818401526020810190506105ac565b60008484015250505050565b60006105de82610593565b6105e8818561059e565b93506105f88185602086016105a9565b80840191505092915050565b600061061082846105d3565b915081905092915050565b60008151905061062a816101e1565b92915050565b600060208284031215610646576106456101cd565b5b60006106548482850161061b565b9150509291505056fea2646970667358221220a865252dfd0f0cc67298deb0c1b88467e6ffe33b76c7b3c3ce89a21e2e43e7cc64736f6c63430008130033"));

    SDKTestSuite sdk = SDKTestSuite::createNewEnvironment("TestEcRecoverCall");
    const Address contract = sdk.deployBytecode(BYTECODE);

    {
      const Hash hash = bytes::hex("0x456e9aea5e197a1f1af7a3e85a3212fa4049a3ba34c2289b4c860fc0b0c64ef3");
      const uint8_t v = 28;
      const Hash r = bytes::hex("0x9242685bf161793cc25603c231bc2f568eb630ea16aa137d2664ac8038825608");
      const Hash s = bytes::hex("0x4f8ae3bd7535248d0bd448298cc2e2071e56992d0774dc340c368ae950852ada");

      const Address expectedResult = bytes::hex("0x7156526fbd7a3c72969b54f64e42c10fbb768c8a");

      Address result = sdk.callViewFunction(contract, &PrecompilesCaller::callEcRecover, hash, v, r, s);

      REQUIRE(result == expectedResult);
    }

    {
      const Bytes input = Utils::makeBytes(bytes::hex("0xa8100ae6aa1940d0b663bb31cd466142ebbdbd5187131b92d93818987832eb89"));
      const Hash output = sdk.callViewFunction(contract, &PrecompilesCaller::callSHA256, input);
      const Hash expectedOutput = bytes::hex("0xc0b057f584795eff8b06d5e420e71d747587d20de836f501921fd1b5741f1283");

      REQUIRE(output == expectedOutput);
    }
  }
}

} // namespace TABI
