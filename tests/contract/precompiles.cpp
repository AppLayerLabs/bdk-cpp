/*
Copyright (c) [2023-2024] [AppLayer Developers]

This software is distributed under the MIT License.
See the LICENSE.txt file in the project root for more information.
*/

#include "libs/catch2/catch_amalgamated.hpp"
#include "contract/precompiles.h"
#include "bytes/hex.h"
#include "../sdktestsuite.hpp"

namespace TPRECOMPILES {

const Bytes BYTECODE = Utils::makeBytes(bytes::hex("60806040527f5ffa7c26a64500657f3786514cf062ddd52098f30000000000000000000000006000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908360601c021790555034801561005d57600080fd5b5061094e8061006d6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063128e49e51461005c578063265dc68c1461008c5780632dbe5cfe146100bc578063ad0eb88c146100ec578063b49fd0231461011c575b600080fd5b61007660048036038101906100719190610516565b61014c565b60405161008391906105de565b60405180910390f35b6100a660048036038101906100a1919061066f565b6101d0565b6040516100b39190610717565b60405180910390f35b6100d660048036038101906100d19190610516565b61029f565b6040516100e391906105de565b60405180910390f35b61010660048036038101906101019190610516565b610323565b6040516101139190610741565b60405180910390f35b61013660048036038101906101319190610516565b61037c565b6040516101439190610797565b60405180910390f35b6060600080600973ffffffffffffffffffffffffffffffffffffffff168460405161017791906107ee565b600060405180830381855afa9150503d80600081146101b2576040519150601f19603f3d011682016040523d82523d6000602084013e6101b7565b606091505b5091509150816101c657600080fd5b8092505050919050565b600080600186868686604051600081526020016040526040516101f69493929190610814565b6020604051602081039080840390855afa158015610218573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610293576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161028a906108b6565b60405180910390fd5b80915050949350505050565b6060600080600473ffffffffffffffffffffffffffffffffffffffff16846040516102ca91906107ee565b600060405180830381855afa9150503d8060008114610305576040519150601f19603f3d011682016040523d82523d6000602084013e61030a565b606091505b50915091508161031957600080fd5b8092505050919050565b600060028260405161033591906107ee565b602060405180830381855afa158015610352573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061037591906108eb565b9050919050565b600060038260405161038e91906107ee565b602060405180830381855afa1580156103ab573d6000803e3d6000fd5b5050506040515160601b9050919050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610423826103da565b810181811067ffffffffffffffff82111715610442576104416103eb565b5b80604052505050565b60006104556103bc565b9050610461828261041a565b919050565b600067ffffffffffffffff821115610481576104806103eb565b5b61048a826103da565b9050602081019050919050565b82818337600083830152505050565b60006104b96104b484610466565b61044b565b9050828152602081018484840111156104d5576104d46103d5565b5b6104e0848285610497565b509392505050565b600082601f8301126104fd576104fc6103d0565b5b813561050d8482602086016104a6565b91505092915050565b60006020828403121561052c5761052b6103c6565b5b600082013567ffffffffffffffff81111561054a576105496103cb565b5b610556848285016104e8565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561059957808201518184015260208101905061057e565b60008484015250505050565b60006105b08261055f565b6105ba818561056a565b93506105ca81856020860161057b565b6105d3816103da565b840191505092915050565b600060208201905081810360008301526105f881846105a5565b905092915050565b6000819050919050565b61061381610600565b811461061e57600080fd5b50565b6000813590506106308161060a565b92915050565b600060ff82169050919050565b61064c81610636565b811461065757600080fd5b50565b60008135905061066981610643565b92915050565b60008060008060808587031215610689576106886103c6565b5b600061069787828801610621565b94505060206106a88782880161065a565b93505060406106b987828801610621565b92505060606106ca87828801610621565b91505092959194509250565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610701826106d6565b9050919050565b610711816106f6565b82525050565b600060208201905061072c6000830184610708565b92915050565b61073b81610600565b82525050565b60006020820190506107566000830184610732565b92915050565b60007fffffffffffffffffffffffffffffffffffffffff00000000000000000000000082169050919050565b6107918161075c565b82525050565b60006020820190506107ac6000830184610788565b92915050565b600081905092915050565b60006107c88261055f565b6107d281856107b2565b93506107e281856020860161057b565b80840191505092915050565b60006107fa82846107bd565b915081905092915050565b61080e81610636565b82525050565b60006080820190506108296000830187610732565b6108366020830186610805565b6108436040830185610732565b6108506060830184610732565b95945050505050565b600082825260208201905092915050565b7f696e76616c6964207369676e6174757265000000000000000000000000000000600082015250565b60006108a0601183610859565b91506108ab8261086a565b602082019050919050565b600060208201905081810360008301526108cf81610893565b9050919050565b6000815190506108e58161060a565b92915050565b600060208284031215610901576109006103c6565b5b600061090f848285016108d6565b9150509291505056fea2646970667358221220829fac99ebbdda74b29b407dfc3384eebc38d9bb4e6bf37f309ce516e3791fc364736f6c63430008130033"));

struct PrecompilesCaller {
  Address callEcRecover(const Hash&, const uint8_t&, const Hash&, const Hash&) const { return Address{}; }

  Hash callSHA256(const Bytes&) const { return Hash{}; }

  Bytes20 callRIPEMD160(const Bytes&) const { return Bytes20{}; }

  Bytes callIdentity(const Bytes&) const { return Bytes{}; }

  Bytes callBlake2(const Bytes&) const { return Bytes{}; }

  static void registerContract() {
    ContractReflectionInterface::registerContractMethods<PrecompilesCaller>(
      std::vector<std::string>{},
      std::make_tuple("callEcRecover", &PrecompilesCaller::callEcRecover, FunctionTypes::View, std::vector<std::string>{"hash", "v", "r", "s"}),
      std::make_tuple("callSHA256", &PrecompilesCaller::callSHA256, FunctionTypes::View, std::vector<std::string>{"input"}),
      std::make_tuple("callRIPEMD160", &PrecompilesCaller::callRIPEMD160, FunctionTypes::View, std::vector<std::string>{"input"}),
      std::make_tuple("callIdentity", &PrecompilesCaller::callIdentity, FunctionTypes::View, std::vector<std::string>{"input"}),
      std::make_tuple("callBlake2", &PrecompilesCaller::callBlake2, FunctionTypes::View, std::vector<std::string>{"input"})
    );
  }
};

TEST_CASE("Precompiles", "[contract][precompiles]") {
  SECTION("valid ecrecover") {
    const Hash hash = bytes::hex("0x456e9aea5e197a1f1af7a3e85a3212fa4049a3ba34c2289b4c860fc0b0c64ef3");
    const uint8_t v = 28;
    const Hash r = bytes::hex("0x9242685bf161793cc25603c231bc2f568eb630ea16aa137d2664ac8038825608");
    const Hash s = bytes::hex("0x4f8ae3bd7535248d0bd448298cc2e2071e56992d0774dc340c368ae950852ada");

    const Address expectedResult = bytes::hex("0x7156526fbd7a3c72969b54f64e42c10fbb768c8a");

    REQUIRE(ecrecover(hash, v, r, s) == expectedResult);
  }

  SECTION("contract call for all precompiles") {
    SDKTestSuite sdk = SDKTestSuite::createNewEnvironment("TestEcRecoverCall");
    const Address contract = sdk.deployBytecode(BYTECODE);

    {
      const Hash hash = bytes::hex("0x456e9aea5e197a1f1af7a3e85a3212fa4049a3ba34c2289b4c860fc0b0c64ef3");
      const uint8_t v = 28;
      const Hash r = bytes::hex("0x9242685bf161793cc25603c231bc2f568eb630ea16aa137d2664ac8038825608");
      const Hash s = bytes::hex("0x4f8ae3bd7535248d0bd448298cc2e2071e56992d0774dc340c368ae950852ada");

      const Address expectedResult = bytes::hex("0x7156526fbd7a3c72969b54f64e42c10fbb768c8a");

      Address result = sdk.callViewFunction(contract, &PrecompilesCaller::callEcRecover, hash, v, r, s);

      REQUIRE(result == expectedResult);
    }

    {
      const Bytes input = Utils::makeBytes(bytes::hex("0xa8100ae6aa1940d0b663bb31cd466142ebbdbd5187131b92d93818987832eb89"));
      const Hash output = sdk.callViewFunction(contract, &PrecompilesCaller::callSHA256, input);
      const Hash expectedOutput = bytes::hex("0xc0b057f584795eff8b06d5e420e71d747587d20de836f501921fd1b5741f1283");

      REQUIRE(output == expectedOutput);
    }

    {
      const Bytes input = Utils::makeBytes(bytes::hex("0x2c0c45d3ecab80fe060e5f1d7057cd2f8de5e557"));

      const Bytes20 output = sdk.callViewFunction(contract, &PrecompilesCaller::callRIPEMD160, input);
      const Bytes20 expectedOutput = bytes::hex("0x1f853832265d16cb91fa64938c2f421fac8f6a87");

      REQUIRE(output == expectedOutput);
    }

    {
      const Bytes input = Utils::makeBytes(bytes::hex("0x1234567890"));
      const Bytes output = sdk.callViewFunction(contract, &PrecompilesCaller::callIdentity, input);

      REQUIRE(input == output);
    }

    {
      const Bytes input = Utils::makeBytes(bytes::hex("0x0000000c48c9bdf267e6096a3ba7ca8485ae67bb2bf894fe72f36e3cf1361d5f3af54fa5d182e6ad7f520e511f6c3e2b8c68059b6bbd41fbabd9831f79217e1319cde05b61626300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000001"));
      const Bytes output = sdk.callViewFunction(contract, &PrecompilesCaller::callBlake2, input);
      const Bytes expectedOutput = Utils::makeBytes(bytes::hex("0xba80a53f981c4d0d6a2797b69f12f6e94c212f14685ac4b74b12bb6fdbffa2d17d87c5392aab792dc252d5de4533cc9518d38aa8dbf1925ab92386edd4009923"));

      REQUIRE(output == expectedOutput);
    }
  }
}

} // namespace TABI
