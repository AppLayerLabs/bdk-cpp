#include "../../src/libs/catch2/catch_amalgamated.hpp"
#include "../../src/contract/templates/erc20wrapper.h" // erc20.h
#include "../sdktestsuite.hpp"
#include "contract/templates/simplecontract.h"

namespace TEVMCALL {

  Bytes erc20bytecode = Hex::toBytes("0x608060405234801561000f575f5ffd5b50604051610a83380380610a8383398101604081905261002e91610204565b604051806040016040528060098152602001682a32b9ba2a37b5b2b760b91b815250604051806040016040528060038152602001621514d560ea1b815250816003908161007b91906102b3565b50600461008882826102b3565b50505061009b33826100a160201b60201c565b50610392565b6001600160a01b0382166100cf5760405163ec442f0560e01b81525f60048201526024015b60405180910390fd5b6100da5f83836100de565b5050565b6001600160a01b038316610108578060025f8282546100fd919061036d565b909155506101789050565b6001600160a01b0383165f908152602081905260409020548181101561015a5760405163391434e360e21b81526001600160a01b038516600482015260248101829052604481018390526064016100c6565b6001600160a01b0384165f9081526020819052604090209082900390555b6001600160a01b038216610194576002805482900390556101b2565b6001600160a01b0382165f9081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516101f791815260200190565b60405180910390a3505050565b5f60208284031215610214575f5ffd5b5051919050565b634e487b7160e01b5f52604160045260245ffd5b600181811c9082168061024357607f821691505b60208210810361026157634e487b7160e01b5f52602260045260245ffd5b50919050565b601f8211156102ae57805f5260205f20601f840160051c8101602085101561028c5750805b601f840160051c820191505b818110156102ab575f8155600101610298565b50505b505050565b81516001600160401b038111156102cc576102cc61021b565b6102e0816102da845461022f565b84610267565b6020601f821160018114610312575f83156102fb5750848201515b5f19600385901b1c1916600184901b1784556102ab565b5f84815260208120601f198516915b828110156103415787850151825560209485019460019092019101610321565b508482101561035e57868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b8082018082111561038c57634e487b7160e01b5f52601160045260245ffd5b92915050565b6106e48061039f5f395ff3fe608060405234801561000f575f5ffd5b5060043610610090575f3560e01c8063313ce56711610063578063313ce567146100fa57806370a082311461010957806395d89b4114610131578063a9059cbb14610139578063dd62ed3e1461014c575f5ffd5b806306fdde0314610094578063095ea7b3146100b257806318160ddd146100d557806323b872dd146100e7575b5f5ffd5b61009c610184565b6040516100a99190610554565b60405180910390f35b6100c56100c03660046105a4565b610214565b60405190151581526020016100a9565b6002545b6040519081526020016100a9565b6100c56100f53660046105cc565b61022d565b604051601281526020016100a9565b6100d9610117366004610606565b6001600160a01b03165f9081526020819052604090205490565b61009c610250565b6100c56101473660046105a4565b61025f565b6100d961015a366004610626565b6001600160a01b039182165f90815260016020908152604080832093909416825291909152205490565b60606003805461019390610657565b80601f01602080910402602001604051908101604052809291908181526020018280546101bf90610657565b801561020a5780601f106101e15761010080835404028352916020019161020a565b820191905f5260205f20905b8154815290600101906020018083116101ed57829003601f168201915b5050505050905090565b5f3361022181858561026c565b60019150505b92915050565b5f3361023a85828561027e565b6102458585856102ff565b506001949350505050565b60606004805461019390610657565b5f336102218185856102ff565b610279838383600161035c565b505050565b6001600160a01b038381165f908152600160209081526040808320938616835292905220545f198110156102f957818110156102eb57604051637dc7a0d960e11b81526001600160a01b038416600482015260248101829052604481018390526064015b60405180910390fd5b6102f984848484035f61035c565b50505050565b6001600160a01b03831661032857604051634b637e8f60e11b81525f60048201526024016102e2565b6001600160a01b0382166103515760405163ec442f0560e01b81525f60048201526024016102e2565b61027983838361042e565b6001600160a01b0384166103855760405163e602df0560e01b81525f60048201526024016102e2565b6001600160a01b0383166103ae57604051634a1406b160e11b81525f60048201526024016102e2565b6001600160a01b038085165f90815260016020908152604080832093871683529290522082905580156102f957826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161042091815260200190565b60405180910390a350505050565b6001600160a01b038316610458578060025f82825461044d919061068f565b909155506104c89050565b6001600160a01b0383165f90815260208190526040902054818110156104aa5760405163391434e360e21b81526001600160a01b038516600482015260248101829052604481018390526064016102e2565b6001600160a01b0384165f9081526020819052604090209082900390555b6001600160a01b0382166104e457600280548290039055610502565b6001600160a01b0382165f9081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161054791815260200190565b60405180910390a3505050565b602081525f82518060208401528060208501604085015e5f604082850101526040601f19601f83011684010191505092915050565b80356001600160a01b038116811461059f575f5ffd5b919050565b5f5f604083850312156105b5575f5ffd5b6105be83610589565b946020939093013593505050565b5f5f5f606084860312156105de575f5ffd5b6105e784610589565b92506105f560208501610589565b929592945050506040919091013590565b5f60208284031215610616575f5ffd5b61061f82610589565b9392505050565b5f5f60408385031215610637575f5ffd5b61064083610589565b915061064e60208401610589565b90509250929050565b600181811c9082168061066b57607f821691505b60208210810361068957634e487b7160e01b5f52602260045260245ffd5b50919050565b8082018082111561022757634e487b7160e01b5f52601160045260245ffdfea2646970667358221220bb38ab6ed96fe17d4ed0a99dfd8e243ce4bbdf7ea8720be32ba90fcd2ab15d6264736f6c634300081e003300000000000000000000000000000000000000000000021e19e0c9bab2400000");

  /*
   * // SPDX-  License-Identifier: MIT
   * pragma solidity ^0.8.0;
   *
   *
   * interface SimpleContract {
   *     function getNameNonView() view external returns (string memory);
   * }
   *
   * contract GetName {
   *     function getName(address contractAddress) view external returns (string memory) {
   *         return SimpleContract(contractAddress).getNameNonView();
   *     }
   * }
   */
   Bytes getNameBytecode = Hex::toBytes("0x6080604052348015600e575f5ffd5b5061021f8061001c5f395ff3fe608060405234801561000f575f5ffd5b5060043610610029575f3560e01c80635fd4b08a1461002d575b5f5ffd5b61004061003b3660046100c0565b610056565b60405161004d91906100ed565b60405180910390f35b6060816001600160a01b031663eaeadcd16040518163ffffffff1660e01b81526004015f60405180830381865afa158015610093573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526100ba9190810190610136565b92915050565b5f602082840312156100d0575f5ffd5b81356001600160a01b03811681146100e6575f5ffd5b9392505050565b602081525f82518060208401528060208501604085015e5f604082850101526040601f19601f83011684010191505092915050565b634e487b7160e01b5f52604160045260245ffd5b5f60208284031215610146575f5ffd5b815167ffffffffffffffff81111561015c575f5ffd5b8201601f8101841361016c575f5ffd5b805167ffffffffffffffff81111561018657610186610122565b604051601f8201601f19908116603f0116810167ffffffffffffffff811182821017156101b5576101b5610122565b6040528181528282016020018610156101cc575f5ffd5b8160208401602083015e5f9181016020019190915294935050505056fea264697066735822122035c4d56cc58bb9efd4ce3f6d0e99ea8eddfcdff59cf5588a1ba090abef0e525f64736f6c634300081e0033");

   class SolGetName {
     public:
       std::string getName([[maybe_unused]] const Address& contractAddress) const { return ""; };
       void static registerContract() {
          ContractReflectionInterface::registerContractMethods<SolGetName>(
            std::vector<std::string>{""},
            std::make_tuple("getName", &SolGetName::getName, FunctionTypes::View, std::vector<std::string>{"address"})
          );
       }
   };

  /*  DELEGATECALL Example
   * pragma solidity ^0.8.0;
   *
   * contract ERC20BalanceDelegateCaller {
   *     mapping(address account => uint256) private balances;
   *     event BalanceOfResult(uint256);
   *     function addBalance(address user, uint256 value) external {
   *         balances[user] += value;
   *     }
   *     function callBalanceOf(address erc20, address user) external returns (uint256) {
   *         bytes memory data = abi.encodeWithSignature("balanceOf(address)", user);
   *         uint256 resultBalance;
   *         assembly {
   *             // Allocate memory for the output (32 bytes)
   *             let success := delegatecall(
   *                 gas(),         // Forward all available gas
   *                 erc20,         // Address of the ERC20 contract
   *                 add(data, 32), // Input data pointer (skip length prefix)
   *                 mload(data),   // Input data size
   *                 0,             // Output location (we'll use memory slot 0)
   *                 32             // Output size (uint256 = 32 bytes)
   *             )
   *             if eq(success, 0) {
   *                 revert(0, 0)
   *             }
   *             // Load the result from memory slot 0
   *             resultBalance := mload(0)
   *         }
   *         emit BalanceOfResult(resultBalance);
   *         return resultBalance;
   *     }
   * }
   */

  Bytes delegateCallerBytecode = Hex::toBytes("0x6080604052348015600e575f5ffd5b506102058061001c5f395ff3fe608060405234801561000f575f5ffd5b5060043610610034575f3560e01c806321e5383a14610038578063d9101f3a1461004d575b5f5ffd5b61004b610046366004610157565b610072565b005b61006061005b36600461017f565b6100a2565b60405190815260200160405180910390f35b6001600160a01b0382165f90815260208190526040812080548392906100999084906101b0565b90915550505050565b6040516001600160a01b03821660248201525f90819060440160408051601f19818403018152919052602080820180516001600160e01b03166370a0823160e01b17815282519293505f928391885af4806100fb575f5ffd5b50505f516040518181527f2f4f4b223562753e25bac297aa55820e3ea4cce9ccaaefc01a919bac735ed60a9060200160405180910390a19150505b92915050565b80356001600160a01b0381168114610152575f5ffd5b919050565b5f5f60408385031215610168575f5ffd5b6101718361013c565b946020939093013593505050565b5f5f60408385031215610190575f5ffd5b6101998361013c565b91506101a76020840161013c565b90509250929050565b8082018082111561013657634e487b7160e01b5f52601160045260245ffdfea26469706673582212200d5a47de9dbab38d735ccb3022351477cd7c7aa9be79d1311ba1523d77ff66b164736f6c634300081e0033");

  class SolERC20BalanceDelegateCaller {
    public:
      void BalanceOfResult(const EventParam<uint256_t, false>& balance) {};
      void addBalance([[maybe_unused]] const Address& user, [[maybe_unused]] const uint256_t& value) { };
      uint256_t callBalanceOf([[maybe_unused]] const Address& erc20, [[maybe_unused]] const Address& user) { return 0; };
      void static registerContract() {
        ContractReflectionInterface::registerContractMethods<SolERC20BalanceDelegateCaller>(
          std::vector<std::string>{""},
          std::make_tuple("addBalance", &SolERC20BalanceDelegateCaller::addBalance, FunctionTypes::NonPayable, std::vector<std::string>{"address", "uint256"}),
          std::make_tuple("callBalanceOf", &SolERC20BalanceDelegateCaller::callBalanceOf, FunctionTypes::NonPayable, std::vector<std::string>{"address", "address"})
        );
        ContractReflectionInterface::registerContractEvents<SolERC20BalanceDelegateCaller>(
          std::make_tuple("BalanceOfResult", false, &SolERC20BalanceDelegateCaller::BalanceOfResult, std::vector<std::string>{"balance"})
        );
      }
  };

  TEST_CASE("EVM <-> C++ Call Tests", "[evm][evmcall]") {
    SDKTestSuite sdk = SDKTestSuite::createNewEnvironment("testEVMCalls");

    SECTION("EVM View/Static -> C++ Non-View/Static") {
      // The EVM contract will try to call a C++ contract while the EVM function is a view only and cannot change the state
      // The C++ function is a non-const/non-view function, so it can change the state.
      // Our execution engine should automatically REVERT the transaction
      Address simpleContractAddress = sdk.deployContract<SimpleContract>(std::string("TestName"), uint256_t(1000), std::make_tuple(
        std::string("TestName"),
        uint256_t(1000)
      ));

      // Now we deploy the EVM contract
      auto evmContractAddress = sdk.deployBytecode(getNameBytecode);

      // Now, we try to call the EVM contract, it should THROW because the initial call is a STATICCALL and
      // it can only call other contracts through STATICCALL
      REQUIRE_THROWS(sdk.callViewFunction(evmContractAddress, &SolGetName::getName, simpleContractAddress));
    }
    SECTION("EVM DelegateCall -> C++") {
      // Basically, ALL DELEGATECALL towards C++ contracts SHOULD BE REJECTED
      // DELEGATECALLs are not supported in C++ contracts, so we should throw an error
      Address evmERC20contractAddress = sdk.deployBytecode(erc20bytecode);
      Address delegateCallerAddress = sdk.deployBytecode(delegateCallerBytecode);

      // Do a transaction calling callBalanceOf
      auto tx = sdk.callFunction(delegateCallerAddress, &SolERC20BalanceDelegateCaller::callBalanceOf, evmERC20contractAddress, sdk.getChainOwnerAccount().address);
      auto callEvents = sdk.getEventsEmittedByTx(tx, &SolERC20BalanceDelegateCaller::BalanceOfResult);
      REQUIRE(callEvents.size() == 1);
      REQUIRE(std::get<0>(ABI::Decoder::decodeData<uint256_t>(callEvents[0].getData())) == uint256_t(0));
      // Now, if we increase the balance of the user, we should see the new balance
      tx = sdk.callFunction(delegateCallerAddress, &SolERC20BalanceDelegateCaller::addBalance, sdk.getChainOwnerAccount().address, uint256_t(100));
      tx = sdk.callFunction(delegateCallerAddress, &SolERC20BalanceDelegateCaller::callBalanceOf, evmERC20contractAddress, sdk.getChainOwnerAccount().address);
      callEvents = sdk.getEventsEmittedByTx(tx, &SolERC20BalanceDelegateCaller::BalanceOfResult);
      REQUIRE(callEvents.size() == 1);
      REQUIRE(std::get<0>(ABI::Decoder::decodeData<uint256_t>(callEvents[0].getData())) == uint256_t(100));

      Address cppERC20contractAddress = sdk.deployContract<ERC20>(std::string("Name"), std::string("Symbol"), uint8_t(18), uint256_t(1000));
      REQUIRE(sdk.callViewFunction(cppERC20contractAddress, &ERC20::balanceOf, sdk.getChainOwnerAccount().address) == uint256_t(1000));

      // Trying DELEGATECALL from EVM to C++ should throw an error
      REQUIRE_THROWS(sdk.callFunction(delegateCallerAddress, &SolERC20BalanceDelegateCaller::callBalanceOf, cppERC20contractAddress, sdk.getChainOwnerAccount().address));
    }
  }
}
