#include "../../src/libs/catch2/catch_amalgamated.hpp"
#include "../../src/contract/abi.h"
#include "../../src/utils/json.hpp"
#include "../../src/utils/strings.h"
#include "../../src/utils/utils.h"

#include <boost/filesystem.hpp>
#include <fstream>

using Catch::Matchers::Equals;

namespace TABI {
  TEST_CASE("ABI Namespace", "[contract]") {
    SECTION("Decode Uint256 Array") {
      std::string hexABI = "0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000002017594d841303970000000000000000000000000000000000000000000000000000027cae776d7500000000000000000000000000000000000000000000000000016201a9fce5dd";
      std::string ABI = Hex::toBytes(hexABI);
      std::vector<ABI::Types> types = { ABI::Types::uint256Arr };

      ABI::Decoder d(types, ABI);
      std::vector<uint256_t> dV = d.getData<std::vector<uint256_t>>(0);

      REQUIRE(dV[0] == uint256_t(2312415123141231511));
      REQUIRE(dV[1] == uint256_t(2734526262645));
      REQUIRE(dV[2] == uint256_t(389234263123421));
    }

    SECTION("Decode Address Array") {
      std::string hexABI = "0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000030000000000000000000000005b38da6a701c568545dcfcb03fcb875f56beddc4000000000000000000000000ab8483f64d9c6d1ecf9b849ae677dd3315835cb20000000000000000000000004b20993bc481177ec7e8f571cecae8a9e22c02db";
      std::string ABI = Hex::toBytes(hexABI);
      std::vector<ABI::Types> types = { ABI::Types::addressArr };

      ABI::Decoder d(types, ABI);
      std::vector<Address> dV = d.getData<std::vector<Address>>(0);

      REQUIRE(dV[0] == Address(std::string("0x5B38Da6a701c568545dCfcB03FcB875f56beddC4"), true));
      REQUIRE(dV[1] == Address(std::string("0xAb8483F64d9C6d1EcF9b849Ae677dD3315835cb2"), true));
      REQUIRE(dV[2] == Address(std::string("0x4B20993Bc481177ec7E8f571ceCaE8A9e22C02db"), true));
    }

    SECTION("Decode Bool Array") {
      std::string hexABI = "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
      std::string ABI = Hex::toBytes(hexABI);
      std::vector<ABI::Types> types = { ABI::Types::booleanArr };

      ABI::Decoder d(types, ABI);
      std::vector<bool> dV = d.getData<std::vector<bool>>(0);

      REQUIRE(dV[0] == true);
      REQUIRE(dV[1] == false);
      REQUIRE(dV[2] == true);
    }

    SECTION("Decode Bytes") {
      std::string hexABI = "0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000040adf1f1a00000000000000000000000000000000000000000000000000000000";
      std::string ABI = Hex::toBytes(hexABI);
      std::vector<ABI::Types> types = { ABI::Types::bytes };

      ABI::Decoder d(types, ABI);
      std::string bytes = d.getData<std::string>(0);

      REQUIRE(bytes == Hex::toBytes("0x0adf1f1a"));
    }

    SECTION("Decode Bytes Array") {
      std::string hexABI = "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000040adf1f1a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004fffadcba0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060113ffedc23100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002aaaa000000000000000000000000000000000000000000000000000000000000";
      std::string ABI = Hex::toBytes(hexABI);
      std::vector<ABI::Types> types = { ABI::Types::bytesArr };

      ABI::Decoder d(types, ABI);
      std::vector<std::string> dV = d.getData<std::vector<std::string>>(0);

      REQUIRE(dV[0] == Hex::toBytes("0x0adf1f1a"));
      REQUIRE(dV[1] == Hex::toBytes("0xfffadcba"));
      REQUIRE(dV[2] == Hex::toBytes("0x0113ffedc231"));
      REQUIRE(dV[3] == Hex::toBytes("0xaaaa"));
    }

    SECTION("Decode String") {
      std::string hexABI = "0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000e5468697320697320612074657374000000000000000000000000000000000000";
      std::string ABI = Hex::toBytes(hexABI);
      std::vector<ABI::Types> types = { ABI::Types::string };

      ABI::Decoder d(types, ABI);
      std::string str = d.getData<std::string>(0);

      REQUIRE(str == "This is a test");
    }

    SECTION("Decode String Array") {
      std::string hexABI = "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000016546869732069732074686520666972737420746573740000000000000000000000000000000000000000000000000000000000000000000000000000000000175468697320697320746865207365636f6e642074657374000000000000000000000000000000000000000000000000000000000000000000000000000000001654686973206973207468652074686972642074657374000000000000000000000000000000000000000000000000000000000000000000000000000000000016546869732069732074686520666f727468207465737400000000000000000000";
      std::string ABI = Hex::toBytes(hexABI);
      std::vector<ABI::Types> types = { ABI::Types::stringArr };

      ABI::Decoder d(types, ABI);
      std::vector<std::string> dV = d.getData<std::vector<std::string>>(0);

      REQUIRE(dV[0] == "This is the first test");
      REQUIRE(dV[1] == "This is the second test");
      REQUIRE(dV[2] == "This is the third test");
      REQUIRE(dV[3] == "This is the forth test"); // Someone fix this typo for the love of the cosmos
    }

    SECTION("Decode Bytes Array + String Array") {
      std::string hexABI = "0x000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000016546869732069732074686520666972737420746573740000000000000000000000000000000000000000000000000000000000000000000000000000000000175468697320697320746865207365636f6e642074657374000000000000000000000000000000000000000000000000000000000000000000000000000000001654686973206973207468652074686972642074657374000000000000000000000000000000000000000000000000000000000000000000000000000000000016546869732069732074686520666f7274682074657374000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000040adf1f1a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004fffadcba0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060113ffedc23100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002aaaa000000000000000000000000000000000000000000000000000000000000";
      std::string ABI = Hex::toBytes(hexABI);
      std::vector<ABI::Types> types = { ABI::Types::stringArr, ABI::Types::bytesArr };

      ABI::Decoder d(types, ABI);
      std::vector<std::string> stringArr = d.getData<std::vector<std::string>>(0);
      std::vector<std::string> bytesArr = d.getData<std::vector<std::string>>(1);

      REQUIRE(stringArr[0] == "This is the first test");
      REQUIRE(stringArr[1] == "This is the second test");
      REQUIRE(stringArr[2] == "This is the third test");
      REQUIRE(stringArr[3] == "This is the forth test"); // Someone fix this typo for the love of the cosmos
      REQUIRE(bytesArr[0] == Hex::toBytes("0x0adf1f1a"));
      REQUIRE(bytesArr[1] == Hex::toBytes("0xfffadcba"));
      REQUIRE(bytesArr[2] == Hex::toBytes("0x0113ffedc231"));
      REQUIRE(bytesArr[3] == Hex::toBytes("0xaaaa"));
    }

    SECTION("JSONENcoder") {
      const std::string addToAddressListExpected = Hex::toBytes(
        "0x5fd673e8000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000020000000000000000000000002e913a79206280b3882860b3ef4df8204a62c8b10000000000000000000000002e913a79206280b3882860b3ef4df8204a62c8b1"
      );
      const std::string addToStringListExpected = Hex::toBytes(
        "0xece4955100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000052616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161610000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004f626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262620000000000000000000000000000000000"
      );
      const std::string addToStringListFourExpected = Hex::toBytes(
        "0xece4955100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000002461616161616161616161616161616161616161616161616161616161616161616161616100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005862626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262000000000000000000000000000000000000000000000000000000000000000000000000000000286363636363636363636363636363636363636363636363636363636363636363636363636363636300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000046464646400000000000000000000000000000000000000000000000000000000"
      );
      const std::string addToBytesListExpected = Hex::toBytes(
        "0x8ab94fd600000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000002aaaa0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002bbbb000000000000000000000000000000000000000000000000000000000000"
      );
      const std::string addToBytesListFourExpected = Hex::toBytes(
        "0x8ab94fd600000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000090aaaaaaaaaaaaaaaaa0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001fbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb0000000000000000000000000000000000000000000000000000000000000000020ccc00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000120ddddddddddddddddddddddddddddddddddd0000000000000000000000000000"
      );
      const std::string testMultipleByteArrayExpected = Hex::toBytes(
        "0x70afa559000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000002aaaa0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002bbbb0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000002cccc0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002dddd000000000000000000000000000000000000000000000000000000000000"
      );
      const std::string addMultipleToByteListExpected = Hex::toBytes(
        "0xf953151e000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000046aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002bbbb000000000000000000000000000000000000000000000000000000000000"
      );
      const std::string addMultipleToStringListExpected = Hex::toBytes(
        "0x4aee7a8d000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000003616161000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000036262620000000000000000000000000000000000000000000000000000000000"
      );
      const std::string testAlmostAllExpected = Hex::toBytes(
        "0x1608f4b100000000000000000000000000000000000000000000000000007614cf69b633000000000000000000000000c4ea73d428ab6589c36905d0f0b01f3051740ff800000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000002e0000000000000000000000000000000000000000000000000000000000000046000000000000000000000000000000000000000000000000000000000000004e00000000000000000000000000000000000000000000000000000000000000002aaaa000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016d4c6f72656d20697073756d20646f6c6f722073697420616d65742c20636f6e73656374657475722061646970697363696e6720656c69742e2050656c6c656e746573717565206567657420706f72747469746f7220746f72746f722c2065742074696e636964756e74206e6962682e2041656e65616e2065726174207175616d2c206d6178696d757320696420677261766964612073697420616d65742c2072686f6e63757320736564206e756c6c612e20437572616269747572206d6178696d75732074656c6c7573206469616d2c2076656c2076756c7075746174652073617069656e206d6178696d75732076697461652e204475697320636f6e73656374657475722c2066656c69732061742065666669636974757220636f6e73656374657475722c20746f72746f72206e69736c20626962656e64756d206d61757269732c20656765742076656e656e61746973206175677565206a7573746f206574206f72636953696d706c6520000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000ac4ea73d428ab6589c36905d0f0b01f3051740ff8000000000000000000000000c4ea73d428ab6589c36905d0f0b01f3051740ff8000000000000000000000000c4ea73d428ab6589c36905d0f0b01f3051740ff80000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000020aaa00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020bbb0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000021aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa00000000000000000000000000000000000000000000000000000000000000"
      );

      boost::filesystem::path contractPath = (boost::filesystem::current_path().parent_path().string() + "/tests/ArrayTest.json");

      std::ifstream contractFile(contractPath.string());
      json contractJson = json::parse(contractFile);

      ABI::JSONEncoder contract(contractJson);

      std::string addToAddressList = contract("addToAddressListArr",
        json::array({
          json::array({
            "0x2E913a79206280B3882860B3eF4dF8204a62C8B1",
            "0x2E913a79206280B3882860B3eF4dF8204a62C8B1"
          })
        })
      );

      std::string addToStringList = contract("addToStringListArr",
        json::array({
          json::array({
            "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
            "bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"
          })
        })
      );

      std::string addToStringListFour = contract("addToStringListArr",
        json::array({
          json::array({
            "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
            "bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb",
            "cccccccccccccccccccccccccccccccccccccccc",
            "dddd"
          })
        })
      );

      std::string addToBytesList = contract("addToByteListArr",
        json::array({
          json::array({
            "0xaaaa",
            "0xbbbb"
          })
        })
      );

      std::string addToBytesListFour = contract("addToByteListArr",
        json::array({
          json::array({
            "0xaaaaaaaaaaaaaaaaa",
            "0xbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb",
            "0xccc",
            "0xddddddddddddddddddddddddddddddddddd"
          })
        })
      );

      std::string testMultipleByteArray = contract("testMultipleByteArray",
        json::array({
          json::array({
            "0xaaaa",
            "0xbbbb"
          }),
          json::array({
            "0xcccc",
            "0xdddd"
          })
        })
      );

      std::string addMultipleToByteList = contract("addMultipleToByteList",
        json::array({
          "0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
          "0xbbbb"
        })
      );

      std::string addMultipleToStringList = contract("addMultipleToStringList",
        json::array({
          "aaa",
          "bbb"
        })
      );

      // This should do it lmao.
      // testAlmostAll(uint256 item1, address item2, bool item3, bytes item4, string item5, string[] item6, address[] item7, bytes[] item8)
      std::string testAlmostAll = contract("testAlmostAll",
        json::array({
          "129831751235123",
          "0xc4ea73d428ab6589c36905d0f0b01f3051740ff8",
          "1",
          "0xaaaa",
          "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque eget porttitor tortor, et tincidunt nibh. Aenean erat quam, maximus id gravida sit amet, rhoncus sed nulla. Curabitur maximus tellus diam, vel vulputate sapien maximus vitae. Duis consectetur, felis at efficitur consectetur, tortor nisl bibendum mauris, eget venenatis augue justo et orciSimple ",
          json::array({
            "aaaaa",
            "bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb",
            "ccc"
          }),
          json::array({
            "0xc4ea73d428ab6589c36905d0f0b01f3051740ff8",
            "0xc4ea73d428ab6589c36905d0f0b01f3051740ff8",
            "0xc4ea73d428ab6589c36905d0f0b01f3051740ff8"
          }),
          json::array({
            "0xaaa",
            "0xbbb",
            "0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
          })
        })
      );

      REQUIRE(addToAddressList == addToAddressListExpected);
      REQUIRE(addToStringList == addToStringListExpected);
      REQUIRE(addToStringListFour == addToStringListFourExpected);
      REQUIRE(addToBytesList == addToBytesListExpected);
      REQUIRE(addToBytesListFour == addToBytesListFourExpected);
      REQUIRE(testMultipleByteArray == testMultipleByteArrayExpected);
      REQUIRE(addMultipleToByteList == addMultipleToByteListExpected);
      REQUIRE(addMultipleToStringList == addMultipleToStringListExpected);
      REQUIRE(testAlmostAll == testAlmostAllExpected);
    }

    /*
    // TODO: we're missing Encoder tests
    SECTION("Check Encoder") {
      ABI::Encoder::EncVar eV;
      eV.push_back(uint256_t(27643981269312));
      eV.push_back(Address(std::string("0x1234567890abcdefedcb1234567890abcdefedcb"), false));
      eV.push_back(true);
      eV.push_back(Hex::toBytes("0x00112233445566778899aabbccddeeff"));
      eV.push_back(std::string("Hello world!"));
      eV.push_back(std::vector<uint256_t>({
        uint256_t(39643965938332),
        uint256_t(98734982795832),
        uint256_t(27641379843293)
      }));
      eV.push_back(std::vector<Address>({
        Address(std::string("0x0000111122223333444455556666777788889999"), false),
        Address(std::string("0xaaaabbbbccccddddeeeeffffeeeeddddccccbbbb"), false),
        Address(std::string("0x1234567890abcdefedcb1234567890abcdefedcb"), false)
      }));
      eV.push_back(std::vector<bool>({
        false, true, false, true, false, true, false, true
      }));
      eV.push_back(std::vector<std::string>({
        Hex::toBytes("0xaaaaa"), Hex::toBytes("0xbbbbb"),
        Hex::toBytes("0xccccc"), Hex::toBytes("0xddddd"),
        Hex::toBytes("0xeeeee"), Hex::toBytes("0xfffff")
      }));
      eV.push_back(std::vector<std::string>({
        std::string("String 1"), std::string("String 2"),
        std::string("String 3"), std::string("String 4"),
        std::string("String 5"), std::string("String 6")
      }));
      ABI::Encoder e(eV,
        std::string("foobar(uint256,address,bool,bytes,string,uint256[],address[],bool[],bytes[],string[])")
      );

      std::string eS = e.getData();
      //std::cout << eS << std::endl;

      REQUIRE(eS.substr(0, 8) == "ed9e3fb9");
      eS.erase(0, 8);
      REQUIRE(eS.substr(0, 64) == Utils::padLeft("19245daf0940", 64));
      eS.erase(0, 64);
      REQUIRE(eS.substr(0, 64) == Utils::padLeft("1234567890abcdefedcb1234567890abcdefedcb", 64));
      eS.erase(0, 64);
      REQUIRE(eS.substr(0, 64) == Utils::padLeft("01", 64));
      eS.erase(0, 64);
      REQUIRE(eS.substr(0, 64) == );


      eV.push_back(Hex::toBytes("0x00112233445566778899aabbccddeeff"));
      eV.push_back(std::string("Hello world!"));
    }
    */
  }
}

